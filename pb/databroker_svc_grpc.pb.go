// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.7
// source: databroker_svc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataBroker_ListDataBrokerRecords_FullMethodName     = "/pomerium.dashboard.DataBroker/ListDataBrokerRecords"
	DataBroker_ListDataBrokerRecordTypes_FullMethodName = "/pomerium.dashboard.DataBroker/ListDataBrokerRecordTypes"
	DataBroker_QueryDataBrokerRecords_FullMethodName    = "/pomerium.dashboard.DataBroker/QueryDataBrokerRecords"
)

// DataBrokerClient is the client API for DataBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataBrokerClient interface {
	ListDataBrokerRecords(ctx context.Context, in *ListDataBrokerRecordsRequest, opts ...grpc.CallOption) (*ListDataBrokerRecordsResponse, error)
	ListDataBrokerRecordTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDataBrokerRecordTypesResponse, error)
	QueryDataBrokerRecords(ctx context.Context, in *QueryDataBrokerRecordsRequest, opts ...grpc.CallOption) (*QueryDataBrokerRecordsResponse, error)
}

type dataBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataBrokerClient(cc grpc.ClientConnInterface) DataBrokerClient {
	return &dataBrokerClient{cc}
}

func (c *dataBrokerClient) ListDataBrokerRecords(ctx context.Context, in *ListDataBrokerRecordsRequest, opts ...grpc.CallOption) (*ListDataBrokerRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDataBrokerRecordsResponse)
	err := c.cc.Invoke(ctx, DataBroker_ListDataBrokerRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataBrokerClient) ListDataBrokerRecordTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDataBrokerRecordTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDataBrokerRecordTypesResponse)
	err := c.cc.Invoke(ctx, DataBroker_ListDataBrokerRecordTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataBrokerClient) QueryDataBrokerRecords(ctx context.Context, in *QueryDataBrokerRecordsRequest, opts ...grpc.CallOption) (*QueryDataBrokerRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDataBrokerRecordsResponse)
	err := c.cc.Invoke(ctx, DataBroker_QueryDataBrokerRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataBrokerServer is the server API for DataBroker service.
// All implementations should embed UnimplementedDataBrokerServer
// for forward compatibility.
type DataBrokerServer interface {
	ListDataBrokerRecords(context.Context, *ListDataBrokerRecordsRequest) (*ListDataBrokerRecordsResponse, error)
	ListDataBrokerRecordTypes(context.Context, *emptypb.Empty) (*ListDataBrokerRecordTypesResponse, error)
	QueryDataBrokerRecords(context.Context, *QueryDataBrokerRecordsRequest) (*QueryDataBrokerRecordsResponse, error)
}

// UnimplementedDataBrokerServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataBrokerServer struct{}

func (UnimplementedDataBrokerServer) ListDataBrokerRecords(context.Context, *ListDataBrokerRecordsRequest) (*ListDataBrokerRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataBrokerRecords not implemented")
}
func (UnimplementedDataBrokerServer) ListDataBrokerRecordTypes(context.Context, *emptypb.Empty) (*ListDataBrokerRecordTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataBrokerRecordTypes not implemented")
}
func (UnimplementedDataBrokerServer) QueryDataBrokerRecords(context.Context, *QueryDataBrokerRecordsRequest) (*QueryDataBrokerRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDataBrokerRecords not implemented")
}
func (UnimplementedDataBrokerServer) testEmbeddedByValue() {}

// UnsafeDataBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataBrokerServer will
// result in compilation errors.
type UnsafeDataBrokerServer interface {
	mustEmbedUnimplementedDataBrokerServer()
}

func RegisterDataBrokerServer(s grpc.ServiceRegistrar, srv DataBrokerServer) {
	// If the following call pancis, it indicates UnimplementedDataBrokerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataBroker_ServiceDesc, srv)
}

func _DataBroker_ListDataBrokerRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataBrokerRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBrokerServer).ListDataBrokerRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataBroker_ListDataBrokerRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBrokerServer).ListDataBrokerRecords(ctx, req.(*ListDataBrokerRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataBroker_ListDataBrokerRecordTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBrokerServer).ListDataBrokerRecordTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataBroker_ListDataBrokerRecordTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBrokerServer).ListDataBrokerRecordTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataBroker_QueryDataBrokerRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataBrokerRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBrokerServer).QueryDataBrokerRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataBroker_QueryDataBrokerRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBrokerServer).QueryDataBrokerRecords(ctx, req.(*QueryDataBrokerRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataBroker_ServiceDesc is the grpc.ServiceDesc for DataBroker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.dashboard.DataBroker",
	HandlerType: (*DataBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDataBrokerRecords",
			Handler:    _DataBroker_ListDataBrokerRecords_Handler,
		},
		{
			MethodName: "ListDataBrokerRecordTypes",
			Handler:    _DataBroker_ListDataBrokerRecordTypes_Handler,
		},
		{
			MethodName: "QueryDataBrokerRecords",
			Handler:    _DataBroker_QueryDataBrokerRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "databroker_svc.proto",
}
