// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: changesets.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChangesetService_ApproveChangeset_FullMethodName  = "/pomerium.dashboard.ChangesetService/ApproveChangeset"
	ChangesetService_DeployChangeset_FullMethodName   = "/pomerium.dashboard.ChangesetService/DeployChangeset"
	ChangesetService_DiffChangeset_FullMethodName     = "/pomerium.dashboard.ChangesetService/DiffChangeset"
	ChangesetService_ListChangesets_FullMethodName    = "/pomerium.dashboard.ChangesetService/ListChangesets"
	ChangesetService_RollbackChangeset_FullMethodName = "/pomerium.dashboard.ChangesetService/RollbackChangeset"
)

// ChangesetServiceClient is the client API for ChangesetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChangesetServiceClient interface {
	ApproveChangeset(ctx context.Context, in *ApproveChangesetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeployChangeset(ctx context.Context, in *DeployChangesetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DiffChangeset(ctx context.Context, in *DiffChangesetRequest, opts ...grpc.CallOption) (*DiffChangesetResponse, error)
	ListChangesets(ctx context.Context, in *ListChangesetsRequest, opts ...grpc.CallOption) (*ListChangesetsResponse, error)
	RollbackChangeset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type changesetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChangesetServiceClient(cc grpc.ClientConnInterface) ChangesetServiceClient {
	return &changesetServiceClient{cc}
}

func (c *changesetServiceClient) ApproveChangeset(ctx context.Context, in *ApproveChangesetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChangesetService_ApproveChangeset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changesetServiceClient) DeployChangeset(ctx context.Context, in *DeployChangesetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChangesetService_DeployChangeset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changesetServiceClient) DiffChangeset(ctx context.Context, in *DiffChangesetRequest, opts ...grpc.CallOption) (*DiffChangesetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiffChangesetResponse)
	err := c.cc.Invoke(ctx, ChangesetService_DiffChangeset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changesetServiceClient) ListChangesets(ctx context.Context, in *ListChangesetsRequest, opts ...grpc.CallOption) (*ListChangesetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChangesetsResponse)
	err := c.cc.Invoke(ctx, ChangesetService_ListChangesets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changesetServiceClient) RollbackChangeset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChangesetService_RollbackChangeset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChangesetServiceServer is the server API for ChangesetService service.
// All implementations should embed UnimplementedChangesetServiceServer
// for forward compatibility.
type ChangesetServiceServer interface {
	ApproveChangeset(context.Context, *ApproveChangesetRequest) (*emptypb.Empty, error)
	DeployChangeset(context.Context, *DeployChangesetRequest) (*emptypb.Empty, error)
	DiffChangeset(context.Context, *DiffChangesetRequest) (*DiffChangesetResponse, error)
	ListChangesets(context.Context, *ListChangesetsRequest) (*ListChangesetsResponse, error)
	RollbackChangeset(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedChangesetServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChangesetServiceServer struct{}

func (UnimplementedChangesetServiceServer) ApproveChangeset(context.Context, *ApproveChangesetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveChangeset not implemented")
}
func (UnimplementedChangesetServiceServer) DeployChangeset(context.Context, *DeployChangesetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployChangeset not implemented")
}
func (UnimplementedChangesetServiceServer) DiffChangeset(context.Context, *DiffChangesetRequest) (*DiffChangesetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiffChangeset not implemented")
}
func (UnimplementedChangesetServiceServer) ListChangesets(context.Context, *ListChangesetsRequest) (*ListChangesetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChangesets not implemented")
}
func (UnimplementedChangesetServiceServer) RollbackChangeset(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackChangeset not implemented")
}
func (UnimplementedChangesetServiceServer) testEmbeddedByValue() {}

// UnsafeChangesetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChangesetServiceServer will
// result in compilation errors.
type UnsafeChangesetServiceServer interface {
	mustEmbedUnimplementedChangesetServiceServer()
}

func RegisterChangesetServiceServer(s grpc.ServiceRegistrar, srv ChangesetServiceServer) {
	// If the following call pancis, it indicates UnimplementedChangesetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChangesetService_ServiceDesc, srv)
}

func _ChangesetService_ApproveChangeset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveChangesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangesetServiceServer).ApproveChangeset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangesetService_ApproveChangeset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangesetServiceServer).ApproveChangeset(ctx, req.(*ApproveChangesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangesetService_DeployChangeset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployChangesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangesetServiceServer).DeployChangeset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangesetService_DeployChangeset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangesetServiceServer).DeployChangeset(ctx, req.(*DeployChangesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangesetService_DiffChangeset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffChangesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangesetServiceServer).DiffChangeset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangesetService_DiffChangeset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangesetServiceServer).DiffChangeset(ctx, req.(*DiffChangesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangesetService_ListChangesets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChangesetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangesetServiceServer).ListChangesets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangesetService_ListChangesets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangesetServiceServer).ListChangesets(ctx, req.(*ListChangesetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangesetService_RollbackChangeset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangesetServiceServer).RollbackChangeset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangesetService_RollbackChangeset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangesetServiceServer).RollbackChangeset(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ChangesetService_ServiceDesc is the grpc.ServiceDesc for ChangesetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChangesetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.dashboard.ChangesetService",
	HandlerType: (*ChangesetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApproveChangeset",
			Handler:    _ChangesetService_ApproveChangeset_Handler,
		},
		{
			MethodName: "DeployChangeset",
			Handler:    _ChangesetService_DeployChangeset_Handler,
		},
		{
			MethodName: "DiffChangeset",
			Handler:    _ChangesetService_DiffChangeset_Handler,
		},
		{
			MethodName: "ListChangesets",
			Handler:    _ChangesetService_ListChangesets_Handler,
		},
		{
			MethodName: "RollbackChangeset",
			Handler:    _ChangesetService_RollbackChangeset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "changesets.proto",
}
