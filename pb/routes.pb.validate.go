// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: routes.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RouteRewriteHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RouteRewriteHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RouteRewriteHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RouteRewriteHeaderMultiError, or nil if none found.
func (m *RouteRewriteHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *RouteRewriteHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Header

	// no validation rules for Value

	switch v := m.Matcher.(type) {
	case *RouteRewriteHeader_Prefix:
		if v == nil {
			err := RouteRewriteHeaderValidationError{
				field:  "Matcher",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Prefix
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RouteRewriteHeaderMultiError(errors)
	}

	return nil
}

// RouteRewriteHeaderMultiError is an error wrapping multiple validation errors
// returned by RouteRewriteHeader.ValidateAll() if the designated constraints
// aren't met.
type RouteRewriteHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteRewriteHeaderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteRewriteHeaderMultiError) AllErrors() []error { return m }

// RouteRewriteHeaderValidationError is the validation error returned by
// RouteRewriteHeader.Validate if the designated constraints aren't met.
type RouteRewriteHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteRewriteHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteRewriteHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteRewriteHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteRewriteHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteRewriteHeaderValidationError) ErrorName() string {
	return "RouteRewriteHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e RouteRewriteHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouteRewriteHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteRewriteHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteRewriteHeaderValidationError{}

// Validate checks the field values on RouteDirectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RouteDirectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RouteDirectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RouteDirectResponseMultiError, or nil if none found.
func (m *RouteDirectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RouteDirectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Body

	if len(errors) > 0 {
		return RouteDirectResponseMultiError(errors)
	}

	return nil
}

// RouteDirectResponseMultiError is an error wrapping multiple validation
// errors returned by RouteDirectResponse.ValidateAll() if the designated
// constraints aren't met.
type RouteDirectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteDirectResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteDirectResponseMultiError) AllErrors() []error { return m }

// RouteDirectResponseValidationError is the validation error returned by
// RouteDirectResponse.Validate if the designated constraints aren't met.
type RouteDirectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteDirectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteDirectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteDirectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteDirectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteDirectResponseValidationError) ErrorName() string {
	return "RouteDirectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RouteDirectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouteDirectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteDirectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteDirectResponseValidationError{}

// Validate checks the field values on JwtGroupsFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JwtGroupsFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JwtGroupsFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JwtGroupsFilterMultiError, or nil if none found.
func (m *JwtGroupsFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *JwtGroupsFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.InferFromPpl != nil {
		// no validation rules for InferFromPpl
	}

	if len(errors) > 0 {
		return JwtGroupsFilterMultiError(errors)
	}

	return nil
}

// JwtGroupsFilterMultiError is an error wrapping multiple validation errors
// returned by JwtGroupsFilter.ValidateAll() if the designated constraints
// aren't met.
type JwtGroupsFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JwtGroupsFilterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JwtGroupsFilterMultiError) AllErrors() []error { return m }

// JwtGroupsFilterValidationError is the validation error returned by
// JwtGroupsFilter.Validate if the designated constraints aren't met.
type JwtGroupsFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JwtGroupsFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JwtGroupsFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JwtGroupsFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JwtGroupsFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JwtGroupsFilterValidationError) ErrorName() string { return "JwtGroupsFilterValidationError" }

// Error satisfies the builtin error interface
func (e JwtGroupsFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJwtGroupsFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JwtGroupsFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JwtGroupsFilterValidationError{}

// Validate checks the field values on Route with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Route) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Route with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RouteMultiError, or nil if none found.
func (m *Route) ValidateAll() error {
	return m.validate(true)
}

func (m *Route) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NamespaceId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetModifiedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "ModifiedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "ModifiedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModifiedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteValidationError{
				field:  "ModifiedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for StatName

	// no validation rules for From

	if all {
		switch v := interface{}(m.GetRedirect()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "Redirect",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "Redirect",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRedirect()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteValidationError{
				field:  "Redirect",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SetRequestHeaders

	// no validation rules for SetResponseHeaders

	for idx, item := range m.GetRewriteResponseHeaders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RouteValidationError{
						field:  fmt.Sprintf("RewriteResponseHeaders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RouteValidationError{
						field:  fmt.Sprintf("RewriteResponseHeaders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RouteValidationError{
					field:  fmt.Sprintf("RewriteResponseHeaders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for EnableGoogleCloudServerlessAuthentication

	if all {
		switch v := interface{}(m.GetJwtGroupsFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "JwtGroupsFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteValidationError{
					field:  "JwtGroupsFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJwtGroupsFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteValidationError{
				field:  "JwtGroupsFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ShowErrorDetails

	// no validation rules for OriginatorId

	// no validation rules for NamespaceName

	for idx, item := range m.GetHealthChecks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RouteValidationError{
						field:  fmt.Sprintf("HealthChecks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RouteValidationError{
						field:  fmt.Sprintf("HealthChecks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RouteValidationError{
					field:  fmt.Sprintf("HealthChecks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.LogoUrl != nil {
		// no validation rules for LogoUrl
	}

	if m.Prefix != nil {
		// no validation rules for Prefix
	}

	if m.Path != nil {
		// no validation rules for Path
	}

	if m.Regex != nil {
		// no validation rules for Regex
	}

	if m.PrefixRewrite != nil {
		// no validation rules for PrefixRewrite
	}

	if m.RegexRewritePattern != nil {
		// no validation rules for RegexRewritePattern
	}

	if m.RegexRewriteSubstitution != nil {
		// no validation rules for RegexRewriteSubstitution
	}

	if m.HostRewrite != nil {
		// no validation rules for HostRewrite
	}

	if m.HostRewriteHeader != nil {
		// no validation rules for HostRewriteHeader
	}

	if m.HostPathRegexRewritePattern != nil {
		// no validation rules for HostPathRegexRewritePattern
	}

	if m.HostPathRegexRewriteSubstitution != nil {
		// no validation rules for HostPathRegexRewriteSubstitution
	}

	if m.RegexPriorityOrder != nil {
		// no validation rules for RegexPriorityOrder
	}

	if m.Timeout != nil {

		if all {
			switch v := interface{}(m.GetTimeout()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RouteValidationError{
						field:  "Timeout",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RouteValidationError{
						field:  "Timeout",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RouteValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.IdleTimeout != nil {

		if all {
			switch v := interface{}(m.GetIdleTimeout()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RouteValidationError{
						field:  "IdleTimeout",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RouteValidationError{
						field:  "IdleTimeout",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdleTimeout()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RouteValidationError{
					field:  "IdleTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.AllowWebsockets != nil {
		// no validation rules for AllowWebsockets
	}

	if m.AllowSpdy != nil {
		// no validation rules for AllowSpdy
	}

	if m.TlsSkipVerify != nil {
		// no validation rules for TlsSkipVerify
	}

	if m.TlsUpstreamServerName != nil {
		// no validation rules for TlsUpstreamServerName
	}

	if m.TlsDownstreamServerName != nil {
		// no validation rules for TlsDownstreamServerName
	}

	if m.TlsCustomCaKeyPairId != nil {
		// no validation rules for TlsCustomCaKeyPairId
	}

	if m.TlsClientKeyPairId != nil {
		// no validation rules for TlsClientKeyPairId
	}

	if m.TlsDownstreamClientCaKeyPairId != nil {
		// no validation rules for TlsDownstreamClientCaKeyPairId
	}

	if m.TlsUpstreamAllowRenegotiation != nil {
		// no validation rules for TlsUpstreamAllowRenegotiation
	}

	if m.PreserveHostHeader != nil {
		// no validation rules for PreserveHostHeader
	}

	if m.PassIdentityHeaders != nil {
		// no validation rules for PassIdentityHeaders
	}

	if m.KubernetesServiceAccountToken != nil {
		// no validation rules for KubernetesServiceAccountToken
	}

	if m.KubernetesServiceAccountTokenFile != nil {
		// no validation rules for KubernetesServiceAccountTokenFile
	}

	if m.JwtIssuerFormat != nil {
		// no validation rules for JwtIssuerFormat
	}

	if m.BearerTokenFormat != nil {
		// no validation rules for BearerTokenFormat
	}

	if m.IdpClientId != nil {
		// no validation rules for IdpClientId
	}

	if m.IdpClientSecret != nil {
		// no validation rules for IdpClientSecret
	}

	if m.IdpAccessTokenAllowedAudiences != nil {

		if all {
			switch v := interface{}(m.GetIdpAccessTokenAllowedAudiences()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RouteValidationError{
						field:  "IdpAccessTokenAllowedAudiences",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RouteValidationError{
						field:  "IdpAccessTokenAllowedAudiences",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdpAccessTokenAllowedAudiences()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RouteValidationError{
					field:  "IdpAccessTokenAllowedAudiences",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.LoadBalancingPolicy != nil {

		if _, ok := LoadBalancingPolicy_name[int32(m.GetLoadBalancingPolicy())]; !ok {
			err := RouteValidationError{
				field:  "LoadBalancingPolicy",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RouteMultiError(errors)
	}

	return nil
}

// RouteMultiError is an error wrapping multiple validation errors returned by
// Route.ValidateAll() if the designated constraints aren't met.
type RouteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteMultiError) AllErrors() []error { return m }

// RouteValidationError is the validation error returned by Route.Validate if
// the designated constraints aren't met.
type RouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteValidationError) ErrorName() string { return "RouteValidationError" }

// Error satisfies the builtin error interface
func (e RouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteValidationError{}

// Validate checks the field values on RouteWithPolicies with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RouteWithPolicies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RouteWithPolicies with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RouteWithPoliciesMultiError, or nil if none found.
func (m *RouteWithPolicies) ValidateAll() error {
	return m.validate(true)
}

func (m *RouteWithPolicies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteWithPoliciesValidationError{
					field:  "Route",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteWithPoliciesValidationError{
					field:  "Route",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteWithPoliciesValidationError{
				field:  "Route",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RouteWithPoliciesValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RouteWithPoliciesValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RouteWithPoliciesValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RouteWithPoliciesMultiError(errors)
	}

	return nil
}

// RouteWithPoliciesMultiError is an error wrapping multiple validation errors
// returned by RouteWithPolicies.ValidateAll() if the designated constraints
// aren't met.
type RouteWithPoliciesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteWithPoliciesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteWithPoliciesMultiError) AllErrors() []error { return m }

// RouteWithPoliciesValidationError is the validation error returned by
// RouteWithPolicies.Validate if the designated constraints aren't met.
type RouteWithPoliciesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteWithPoliciesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteWithPoliciesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteWithPoliciesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteWithPoliciesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteWithPoliciesValidationError) ErrorName() string {
	return "RouteWithPoliciesValidationError"
}

// Error satisfies the builtin error interface
func (e RouteWithPoliciesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouteWithPolicies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteWithPoliciesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteWithPoliciesValidationError{}

// Validate checks the field values on DeleteRouteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRouteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRouteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRouteRequestMultiError, or nil if none found.
func (m *DeleteRouteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRouteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRouteRequestMultiError(errors)
	}

	return nil
}

// DeleteRouteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRouteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRouteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRouteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRouteRequestMultiError) AllErrors() []error { return m }

// DeleteRouteRequestValidationError is the validation error returned by
// DeleteRouteRequest.Validate if the designated constraints aren't met.
type DeleteRouteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRouteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRouteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRouteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRouteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRouteRequestValidationError) ErrorName() string {
	return "DeleteRouteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRouteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRouteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRouteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRouteRequestValidationError{}

// Validate checks the field values on DeleteRouteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRouteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRouteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRouteResponseMultiError, or nil if none found.
func (m *DeleteRouteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRouteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRouteResponseMultiError(errors)
	}

	return nil
}

// DeleteRouteResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteRouteResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteRouteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRouteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRouteResponseMultiError) AllErrors() []error { return m }

// DeleteRouteResponseValidationError is the validation error returned by
// DeleteRouteResponse.Validate if the designated constraints aren't met.
type DeleteRouteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRouteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRouteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRouteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRouteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRouteResponseValidationError) ErrorName() string {
	return "DeleteRouteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRouteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRouteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRouteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRouteResponseValidationError{}

// Validate checks the field values on DeleteRoutesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoutesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoutesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoutesRequestMultiError, or nil if none found.
func (m *DeleteRoutesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoutesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoutesRequestMultiError(errors)
	}

	return nil
}

// DeleteRoutesRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRoutesRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoutesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoutesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoutesRequestMultiError) AllErrors() []error { return m }

// DeleteRoutesRequestValidationError is the validation error returned by
// DeleteRoutesRequest.Validate if the designated constraints aren't met.
type DeleteRoutesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoutesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoutesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoutesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoutesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoutesRequestValidationError) ErrorName() string {
	return "DeleteRoutesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoutesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoutesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoutesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoutesRequestValidationError{}

// Validate checks the field values on DeleteRoutesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoutesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoutesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoutesResponseMultiError, or nil if none found.
func (m *DeleteRoutesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoutesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoutesResponseMultiError(errors)
	}

	return nil
}

// DeleteRoutesResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteRoutesResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoutesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoutesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoutesResponseMultiError) AllErrors() []error { return m }

// DeleteRoutesResponseValidationError is the validation error returned by
// DeleteRoutesResponse.Validate if the designated constraints aren't met.
type DeleteRoutesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoutesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoutesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoutesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoutesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoutesResponseValidationError) ErrorName() string {
	return "DeleteRoutesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoutesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoutesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoutesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoutesResponseValidationError{}

// Validate checks the field values on GetRouteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRouteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRouteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRouteRequestMultiError, or nil if none found.
func (m *GetRouteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRouteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRouteRequestMultiError(errors)
	}

	return nil
}

// GetRouteRequestMultiError is an error wrapping multiple validation errors
// returned by GetRouteRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRouteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRouteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRouteRequestMultiError) AllErrors() []error { return m }

// GetRouteRequestValidationError is the validation error returned by
// GetRouteRequest.Validate if the designated constraints aren't met.
type GetRouteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRouteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRouteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRouteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRouteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRouteRequestValidationError) ErrorName() string { return "GetRouteRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRouteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRouteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRouteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRouteRequestValidationError{}

// Validate checks the field values on GetRouteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRouteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRouteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRouteResponseMultiError, or nil if none found.
func (m *GetRouteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRouteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRouteResponseValidationError{
					field:  "Route",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRouteResponseValidationError{
					field:  "Route",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRouteResponseValidationError{
				field:  "Route",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRouteResponseMultiError(errors)
	}

	return nil
}

// GetRouteResponseMultiError is an error wrapping multiple validation errors
// returned by GetRouteResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRouteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRouteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRouteResponseMultiError) AllErrors() []error { return m }

// GetRouteResponseValidationError is the validation error returned by
// GetRouteResponse.Validate if the designated constraints aren't met.
type GetRouteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRouteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRouteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRouteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRouteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRouteResponseValidationError) ErrorName() string { return "GetRouteResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRouteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRouteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRouteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRouteResponseValidationError{}

// Validate checks the field values on ListRoutesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRoutesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoutesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoutesRequestMultiError, or nil if none found.
func (m *ListRoutesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoutesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if m.Query != nil {
		// no validation rules for Query
	}

	if m.Offset != nil {
		// no validation rules for Offset
	}

	if m.Limit != nil {
		// no validation rules for Limit
	}

	if m.OrderBy != nil {
		// no validation rules for OrderBy
	}

	if m.ClusterId != nil {
		// no validation rules for ClusterId
	}

	if len(errors) > 0 {
		return ListRoutesRequestMultiError(errors)
	}

	return nil
}

// ListRoutesRequestMultiError is an error wrapping multiple validation errors
// returned by ListRoutesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRoutesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoutesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoutesRequestMultiError) AllErrors() []error { return m }

// ListRoutesRequestValidationError is the validation error returned by
// ListRoutesRequest.Validate if the designated constraints aren't met.
type ListRoutesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoutesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoutesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoutesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoutesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoutesRequestValidationError) ErrorName() string {
	return "ListRoutesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoutesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoutesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoutesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoutesRequestValidationError{}

// Validate checks the field values on ListRoutesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoutesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoutesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoutesResponseMultiError, or nil if none found.
func (m *ListRoutesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoutesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoutes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoutesResponseValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoutesResponseValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoutesResponseValidationError{
					field:  fmt.Sprintf("Routes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return ListRoutesResponseMultiError(errors)
	}

	return nil
}

// ListRoutesResponseMultiError is an error wrapping multiple validation errors
// returned by ListRoutesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRoutesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoutesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoutesResponseMultiError) AllErrors() []error { return m }

// ListRoutesResponseValidationError is the validation error returned by
// ListRoutesResponse.Validate if the designated constraints aren't met.
type ListRoutesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoutesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoutesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoutesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoutesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoutesResponseValidationError) ErrorName() string {
	return "ListRoutesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoutesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoutesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoutesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoutesResponseValidationError{}

// Validate checks the field values on LoadRoutesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoadRoutesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadRoutesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadRoutesRequestMultiError, or nil if none found.
func (m *LoadRoutesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadRoutesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Contents

	if len(errors) > 0 {
		return LoadRoutesRequestMultiError(errors)
	}

	return nil
}

// LoadRoutesRequestMultiError is an error wrapping multiple validation errors
// returned by LoadRoutesRequest.ValidateAll() if the designated constraints
// aren't met.
type LoadRoutesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadRoutesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadRoutesRequestMultiError) AllErrors() []error { return m }

// LoadRoutesRequestValidationError is the validation error returned by
// LoadRoutesRequest.Validate if the designated constraints aren't met.
type LoadRoutesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadRoutesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadRoutesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadRoutesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadRoutesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadRoutesRequestValidationError) ErrorName() string {
	return "LoadRoutesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadRoutesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadRoutesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadRoutesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadRoutesRequestValidationError{}

// Validate checks the field values on LoadRoutesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadRoutesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadRoutesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadRoutesResponseMultiError, or nil if none found.
func (m *LoadRoutesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadRoutesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoutes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadRoutesResponseValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadRoutesResponseValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadRoutesResponseValidationError{
					field:  fmt.Sprintf("Routes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LoadRoutesResponseMultiError(errors)
	}

	return nil
}

// LoadRoutesResponseMultiError is an error wrapping multiple validation errors
// returned by LoadRoutesResponse.ValidateAll() if the designated constraints
// aren't met.
type LoadRoutesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadRoutesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadRoutesResponseMultiError) AllErrors() []error { return m }

// LoadRoutesResponseValidationError is the validation error returned by
// LoadRoutesResponse.Validate if the designated constraints aren't met.
type LoadRoutesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadRoutesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadRoutesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadRoutesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadRoutesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadRoutesResponseValidationError) ErrorName() string {
	return "LoadRoutesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoadRoutesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadRoutesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadRoutesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadRoutesResponseValidationError{}

// Validate checks the field values on SetRouteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetRouteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRouteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetRouteRequestMultiError, or nil if none found.
func (m *SetRouteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRouteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetRouteRequestValidationError{
					field:  "Route",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetRouteRequestValidationError{
					field:  "Route",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetRouteRequestValidationError{
				field:  "Route",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetRouteRequestMultiError(errors)
	}

	return nil
}

// SetRouteRequestMultiError is an error wrapping multiple validation errors
// returned by SetRouteRequest.ValidateAll() if the designated constraints
// aren't met.
type SetRouteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRouteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRouteRequestMultiError) AllErrors() []error { return m }

// SetRouteRequestValidationError is the validation error returned by
// SetRouteRequest.Validate if the designated constraints aren't met.
type SetRouteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRouteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRouteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRouteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRouteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRouteRequestValidationError) ErrorName() string { return "SetRouteRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetRouteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRouteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRouteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRouteRequestValidationError{}

// Validate checks the field values on SetRouteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetRouteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRouteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetRouteResponseMultiError, or nil if none found.
func (m *SetRouteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRouteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetRouteResponseValidationError{
					field:  "Route",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetRouteResponseValidationError{
					field:  "Route",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetRouteResponseValidationError{
				field:  "Route",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetRouteResponseMultiError(errors)
	}

	return nil
}

// SetRouteResponseMultiError is an error wrapping multiple validation errors
// returned by SetRouteResponse.ValidateAll() if the designated constraints
// aren't met.
type SetRouteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRouteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRouteResponseMultiError) AllErrors() []error { return m }

// SetRouteResponseValidationError is the validation error returned by
// SetRouteResponse.Validate if the designated constraints aren't met.
type SetRouteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRouteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRouteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRouteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRouteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRouteResponseValidationError) ErrorName() string { return "SetRouteResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetRouteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRouteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRouteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRouteResponseValidationError{}

// Validate checks the field values on SetRoutesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetRoutesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRoutesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetRoutesRequestMultiError, or nil if none found.
func (m *SetRoutesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRoutesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoutes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetRoutesRequestValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetRoutesRequestValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetRoutesRequestValidationError{
					field:  fmt.Sprintf("Routes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetRoutesRequestMultiError(errors)
	}

	return nil
}

// SetRoutesRequestMultiError is an error wrapping multiple validation errors
// returned by SetRoutesRequest.ValidateAll() if the designated constraints
// aren't met.
type SetRoutesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRoutesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRoutesRequestMultiError) AllErrors() []error { return m }

// SetRoutesRequestValidationError is the validation error returned by
// SetRoutesRequest.Validate if the designated constraints aren't met.
type SetRoutesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRoutesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRoutesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRoutesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRoutesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRoutesRequestValidationError) ErrorName() string { return "SetRoutesRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetRoutesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRoutesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRoutesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRoutesRequestValidationError{}

// Validate checks the field values on SetRoutesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetRoutesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRoutesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetRoutesResponseMultiError, or nil if none found.
func (m *SetRoutesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRoutesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoutes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetRoutesResponseValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetRoutesResponseValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetRoutesResponseValidationError{
					field:  fmt.Sprintf("Routes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetRoutesResponseMultiError(errors)
	}

	return nil
}

// SetRoutesResponseMultiError is an error wrapping multiple validation errors
// returned by SetRoutesResponse.ValidateAll() if the designated constraints
// aren't met.
type SetRoutesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRoutesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRoutesResponseMultiError) AllErrors() []error { return m }

// SetRoutesResponseValidationError is the validation error returned by
// SetRoutesResponse.Validate if the designated constraints aren't met.
type SetRoutesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRoutesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRoutesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRoutesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRoutesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRoutesResponseValidationError) ErrorName() string {
	return "SetRoutesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetRoutesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRoutesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRoutesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRoutesResponseValidationError{}

// Validate checks the field values on MoveRoutesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MoveRoutesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveRoutesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MoveRoutesRequestMultiError, or nil if none found.
func (m *MoveRoutesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveRoutesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewNamespaceId

	if len(errors) > 0 {
		return MoveRoutesRequestMultiError(errors)
	}

	return nil
}

// MoveRoutesRequestMultiError is an error wrapping multiple validation errors
// returned by MoveRoutesRequest.ValidateAll() if the designated constraints
// aren't met.
type MoveRoutesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveRoutesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveRoutesRequestMultiError) AllErrors() []error { return m }

// MoveRoutesRequestValidationError is the validation error returned by
// MoveRoutesRequest.Validate if the designated constraints aren't met.
type MoveRoutesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveRoutesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveRoutesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveRoutesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveRoutesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveRoutesRequestValidationError) ErrorName() string {
	return "MoveRoutesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MoveRoutesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveRoutesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveRoutesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveRoutesRequestValidationError{}

// Validate checks the field values on MoveRoutesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MoveRoutesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveRoutesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MoveRoutesResponseMultiError, or nil if none found.
func (m *MoveRoutesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveRoutesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MoveRoutesResponseMultiError(errors)
	}

	return nil
}

// MoveRoutesResponseMultiError is an error wrapping multiple validation errors
// returned by MoveRoutesResponse.ValidateAll() if the designated constraints
// aren't met.
type MoveRoutesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveRoutesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveRoutesResponseMultiError) AllErrors() []error { return m }

// MoveRoutesResponseValidationError is the validation error returned by
// MoveRoutesResponse.Validate if the designated constraints aren't met.
type MoveRoutesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveRoutesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveRoutesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveRoutesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveRoutesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveRoutesResponseValidationError) ErrorName() string {
	return "MoveRoutesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MoveRoutesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveRoutesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveRoutesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveRoutesResponseValidationError{}

// Validate checks the field values on Route_StringList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Route_StringList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Route_StringList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Route_StringListMultiError, or nil if none found.
func (m *Route_StringList) ValidateAll() error {
	return m.validate(true)
}

func (m *Route_StringList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Route_StringListMultiError(errors)
	}

	return nil
}

// Route_StringListMultiError is an error wrapping multiple validation errors
// returned by Route_StringList.ValidateAll() if the designated constraints
// aren't met.
type Route_StringListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Route_StringListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Route_StringListMultiError) AllErrors() []error { return m }

// Route_StringListValidationError is the validation error returned by
// Route_StringList.Validate if the designated constraints aren't met.
type Route_StringListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Route_StringListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Route_StringListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Route_StringListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Route_StringListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Route_StringListValidationError) ErrorName() string { return "Route_StringListValidationError" }

// Error satisfies the builtin error interface
func (e Route_StringListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoute_StringList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Route_StringListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Route_StringListValidationError{}
