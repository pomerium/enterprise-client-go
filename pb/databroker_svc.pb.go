// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: databroker_svc.proto

package pb

import (
	context "context"
	databroker "github.com/pomerium/pomerium/pkg/grpc/databroker"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListDataBrokerRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType string `protobuf:"bytes,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`
}

func (x *ListDataBrokerRecordsRequest) Reset() {
	*x = ListDataBrokerRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databroker_svc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataBrokerRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataBrokerRecordsRequest) ProtoMessage() {}

func (x *ListDataBrokerRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_databroker_svc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataBrokerRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListDataBrokerRecordsRequest) Descriptor() ([]byte, []int) {
	return file_databroker_svc_proto_rawDescGZIP(), []int{0}
}

func (x *ListDataBrokerRecordsRequest) GetRecordType() string {
	if x != nil {
		return x.RecordType
	}
	return ""
}

type ListDataBrokerRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*databroker.Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ListDataBrokerRecordsResponse) Reset() {
	*x = ListDataBrokerRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databroker_svc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataBrokerRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataBrokerRecordsResponse) ProtoMessage() {}

func (x *ListDataBrokerRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_databroker_svc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataBrokerRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListDataBrokerRecordsResponse) Descriptor() ([]byte, []int) {
	return file_databroker_svc_proto_rawDescGZIP(), []int{1}
}

func (x *ListDataBrokerRecordsResponse) GetRecords() []*databroker.Record {
	if x != nil {
		return x.Records
	}
	return nil
}

type ListDataBrokerRecordTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordTypes []string `protobuf:"bytes,1,rep,name=record_types,json=recordTypes,proto3" json:"record_types,omitempty"`
}

func (x *ListDataBrokerRecordTypesResponse) Reset() {
	*x = ListDataBrokerRecordTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databroker_svc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDataBrokerRecordTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataBrokerRecordTypesResponse) ProtoMessage() {}

func (x *ListDataBrokerRecordTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_databroker_svc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataBrokerRecordTypesResponse.ProtoReflect.Descriptor instead.
func (*ListDataBrokerRecordTypesResponse) Descriptor() ([]byte, []int) {
	return file_databroker_svc_proto_rawDescGZIP(), []int{2}
}

func (x *ListDataBrokerRecordTypesResponse) GetRecordTypes() []string {
	if x != nil {
		return x.RecordTypes
	}
	return nil
}

type QueryDataBrokerRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordType string `protobuf:"bytes,1,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`
	// look up records with any fields that match the query
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// list records starting from an offset in the total list
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// list records up to a limit
	Limit int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueryDataBrokerRecordsRequest) Reset() {
	*x = QueryDataBrokerRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databroker_svc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDataBrokerRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDataBrokerRecordsRequest) ProtoMessage() {}

func (x *QueryDataBrokerRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_databroker_svc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDataBrokerRecordsRequest.ProtoReflect.Descriptor instead.
func (*QueryDataBrokerRecordsRequest) Descriptor() ([]byte, []int) {
	return file_databroker_svc_proto_rawDescGZIP(), []int{3}
}

func (x *QueryDataBrokerRecordsRequest) GetRecordType() string {
	if x != nil {
		return x.RecordType
	}
	return ""
}

func (x *QueryDataBrokerRecordsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryDataBrokerRecordsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueryDataBrokerRecordsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Record ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Record properties
	Properties *structpb.Struct `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databroker_svc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_databroker_svc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_databroker_svc_proto_rawDescGZIP(), []int{4}
}

func (x *Record) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Record) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type QueryDataBrokerRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maps record IDs to record properties
	Records    []*Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	TotalCount int64     `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *QueryDataBrokerRecordsResponse) Reset() {
	*x = QueryDataBrokerRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databroker_svc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDataBrokerRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDataBrokerRecordsResponse) ProtoMessage() {}

func (x *QueryDataBrokerRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_databroker_svc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDataBrokerRecordsResponse.ProtoReflect.Descriptor instead.
func (*QueryDataBrokerRecordsResponse) Descriptor() ([]byte, []int) {
	return file_databroker_svc_proto_rawDescGZIP(), []int{5}
}

func (x *QueryDataBrokerRecordsResponse) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *QueryDataBrokerRecordsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_databroker_svc_proto protoreflect.FileDescriptor

var file_databroker_svc_proto_rawDesc = []byte{
	0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2f,
	0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3f, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x46, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x22, 0x84, 0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x51, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x1e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x32, 0xf7, 0x02, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x12, 0x7c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x30, 0x2e, 0x70, 0x6f,
	0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6a, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x35, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x16,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x31, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75,
	0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x6f, 0x6d, 0x65,
	0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2d, 0x5a,
	0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x6d, 0x65,
	0x72, 0x69, 0x75, 0x6d, 0x2f, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2d, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_databroker_svc_proto_rawDescOnce sync.Once
	file_databroker_svc_proto_rawDescData = file_databroker_svc_proto_rawDesc
)

func file_databroker_svc_proto_rawDescGZIP() []byte {
	file_databroker_svc_proto_rawDescOnce.Do(func() {
		file_databroker_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_databroker_svc_proto_rawDescData)
	})
	return file_databroker_svc_proto_rawDescData
}

var file_databroker_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_databroker_svc_proto_goTypes = []any{
	(*ListDataBrokerRecordsRequest)(nil),      // 0: pomerium.dashboard.ListDataBrokerRecordsRequest
	(*ListDataBrokerRecordsResponse)(nil),     // 1: pomerium.dashboard.ListDataBrokerRecordsResponse
	(*ListDataBrokerRecordTypesResponse)(nil), // 2: pomerium.dashboard.ListDataBrokerRecordTypesResponse
	(*QueryDataBrokerRecordsRequest)(nil),     // 3: pomerium.dashboard.QueryDataBrokerRecordsRequest
	(*Record)(nil),                            // 4: pomerium.dashboard.Record
	(*QueryDataBrokerRecordsResponse)(nil),    // 5: pomerium.dashboard.QueryDataBrokerRecordsResponse
	(*databroker.Record)(nil),                 // 6: databroker.Record
	(*structpb.Struct)(nil),                   // 7: google.protobuf.Struct
	(*emptypb.Empty)(nil),                     // 8: google.protobuf.Empty
}
var file_databroker_svc_proto_depIdxs = []int32{
	6, // 0: pomerium.dashboard.ListDataBrokerRecordsResponse.records:type_name -> databroker.Record
	7, // 1: pomerium.dashboard.Record.properties:type_name -> google.protobuf.Struct
	4, // 2: pomerium.dashboard.QueryDataBrokerRecordsResponse.records:type_name -> pomerium.dashboard.Record
	0, // 3: pomerium.dashboard.DataBroker.ListDataBrokerRecords:input_type -> pomerium.dashboard.ListDataBrokerRecordsRequest
	8, // 4: pomerium.dashboard.DataBroker.ListDataBrokerRecordTypes:input_type -> google.protobuf.Empty
	3, // 5: pomerium.dashboard.DataBroker.QueryDataBrokerRecords:input_type -> pomerium.dashboard.QueryDataBrokerRecordsRequest
	1, // 6: pomerium.dashboard.DataBroker.ListDataBrokerRecords:output_type -> pomerium.dashboard.ListDataBrokerRecordsResponse
	2, // 7: pomerium.dashboard.DataBroker.ListDataBrokerRecordTypes:output_type -> pomerium.dashboard.ListDataBrokerRecordTypesResponse
	5, // 8: pomerium.dashboard.DataBroker.QueryDataBrokerRecords:output_type -> pomerium.dashboard.QueryDataBrokerRecordsResponse
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_databroker_svc_proto_init() }
func file_databroker_svc_proto_init() {
	if File_databroker_svc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_databroker_svc_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListDataBrokerRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databroker_svc_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListDataBrokerRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databroker_svc_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListDataBrokerRecordTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databroker_svc_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*QueryDataBrokerRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databroker_svc_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databroker_svc_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*QueryDataBrokerRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_databroker_svc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_databroker_svc_proto_goTypes,
		DependencyIndexes: file_databroker_svc_proto_depIdxs,
		MessageInfos:      file_databroker_svc_proto_msgTypes,
	}.Build()
	File_databroker_svc_proto = out.File
	file_databroker_svc_proto_rawDesc = nil
	file_databroker_svc_proto_goTypes = nil
	file_databroker_svc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataBrokerClient is the client API for DataBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataBrokerClient interface {
	ListDataBrokerRecords(ctx context.Context, in *ListDataBrokerRecordsRequest, opts ...grpc.CallOption) (*ListDataBrokerRecordsResponse, error)
	ListDataBrokerRecordTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDataBrokerRecordTypesResponse, error)
	QueryDataBrokerRecords(ctx context.Context, in *QueryDataBrokerRecordsRequest, opts ...grpc.CallOption) (*QueryDataBrokerRecordsResponse, error)
}

type dataBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataBrokerClient(cc grpc.ClientConnInterface) DataBrokerClient {
	return &dataBrokerClient{cc}
}

func (c *dataBrokerClient) ListDataBrokerRecords(ctx context.Context, in *ListDataBrokerRecordsRequest, opts ...grpc.CallOption) (*ListDataBrokerRecordsResponse, error) {
	out := new(ListDataBrokerRecordsResponse)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.DataBroker/ListDataBrokerRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataBrokerClient) ListDataBrokerRecordTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListDataBrokerRecordTypesResponse, error) {
	out := new(ListDataBrokerRecordTypesResponse)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.DataBroker/ListDataBrokerRecordTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataBrokerClient) QueryDataBrokerRecords(ctx context.Context, in *QueryDataBrokerRecordsRequest, opts ...grpc.CallOption) (*QueryDataBrokerRecordsResponse, error) {
	out := new(QueryDataBrokerRecordsResponse)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.DataBroker/QueryDataBrokerRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataBrokerServer is the server API for DataBroker service.
type DataBrokerServer interface {
	ListDataBrokerRecords(context.Context, *ListDataBrokerRecordsRequest) (*ListDataBrokerRecordsResponse, error)
	ListDataBrokerRecordTypes(context.Context, *emptypb.Empty) (*ListDataBrokerRecordTypesResponse, error)
	QueryDataBrokerRecords(context.Context, *QueryDataBrokerRecordsRequest) (*QueryDataBrokerRecordsResponse, error)
}

// UnimplementedDataBrokerServer can be embedded to have forward compatible implementations.
type UnimplementedDataBrokerServer struct {
}

func (*UnimplementedDataBrokerServer) ListDataBrokerRecords(context.Context, *ListDataBrokerRecordsRequest) (*ListDataBrokerRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataBrokerRecords not implemented")
}
func (*UnimplementedDataBrokerServer) ListDataBrokerRecordTypes(context.Context, *emptypb.Empty) (*ListDataBrokerRecordTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataBrokerRecordTypes not implemented")
}
func (*UnimplementedDataBrokerServer) QueryDataBrokerRecords(context.Context, *QueryDataBrokerRecordsRequest) (*QueryDataBrokerRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDataBrokerRecords not implemented")
}

func RegisterDataBrokerServer(s *grpc.Server, srv DataBrokerServer) {
	s.RegisterService(&_DataBroker_serviceDesc, srv)
}

func _DataBroker_ListDataBrokerRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataBrokerRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBrokerServer).ListDataBrokerRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.DataBroker/ListDataBrokerRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBrokerServer).ListDataBrokerRecords(ctx, req.(*ListDataBrokerRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataBroker_ListDataBrokerRecordTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBrokerServer).ListDataBrokerRecordTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.DataBroker/ListDataBrokerRecordTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBrokerServer).ListDataBrokerRecordTypes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataBroker_QueryDataBrokerRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataBrokerRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBrokerServer).QueryDataBrokerRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.DataBroker/QueryDataBrokerRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBrokerServer).QueryDataBrokerRecords(ctx, req.(*QueryDataBrokerRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataBroker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.dashboard.DataBroker",
	HandlerType: (*DataBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDataBrokerRecords",
			Handler:    _DataBroker_ListDataBrokerRecords_Handler,
		},
		{
			MethodName: "ListDataBrokerRecordTypes",
			Handler:    _DataBroker_ListDataBrokerRecordTypes_Handler,
		},
		{
			MethodName: "QueryDataBrokerRecords",
			Handler:    _DataBroker_QueryDataBrokerRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "databroker_svc.proto",
}
