// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.7
// source: users.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_GetUserInfo_FullMethodName = "/pomerium.dashboard.UserService/GetUserInfo"
	UserService_QueryGroups_FullMethodName = "/pomerium.dashboard.UserService/QueryGroups"
	UserService_QueryUsers_FullMethodName  = "/pomerium.dashboard.UserService/QueryUsers"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// UserService supports querying directory data from the databroker
type UserServiceClient interface {
	// GetUserInfo retrieves identity information and permission mappings for a
	// user
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// QueryGroups retrieves groups from the databroker based on
	// QueryGroupsRequest parameters
	QueryGroups(ctx context.Context, in *QueryGroupsRequest, opts ...grpc.CallOption) (*QueryGroupsResponse, error)
	// QueryUsers retrieves users from the databroker based on QueryUsersRequest
	// parameters
	QueryUsers(ctx context.Context, in *QueryUsersRequest, opts ...grpc.CallOption) (*QueryUsersResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QueryGroups(ctx context.Context, in *QueryGroupsRequest, opts ...grpc.CallOption) (*QueryGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGroupsResponse)
	err := c.cc.Invoke(ctx, UserService_QueryGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QueryUsers(ctx context.Context, in *QueryUsersRequest, opts ...grpc.CallOption) (*QueryUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUsersResponse)
	err := c.cc.Invoke(ctx, UserService_QueryUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations should embed UnimplementedUserServiceServer
// for forward compatibility.
//
// UserService supports querying directory data from the databroker
type UserServiceServer interface {
	// GetUserInfo retrieves identity information and permission mappings for a
	// user
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	// QueryGroups retrieves groups from the databroker based on
	// QueryGroupsRequest parameters
	QueryGroups(context.Context, *QueryGroupsRequest) (*QueryGroupsResponse, error)
	// QueryUsers retrieves users from the databroker based on QueryUsersRequest
	// parameters
	QueryUsers(context.Context, *QueryUsersRequest) (*QueryUsersResponse, error)
}

// UnimplementedUserServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServiceServer) QueryGroups(context.Context, *QueryGroupsRequest) (*QueryGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGroups not implemented")
}
func (UnimplementedUserServiceServer) QueryUsers(context.Context, *QueryUsersRequest) (*QueryUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUsers not implemented")
}
func (UnimplementedUserServiceServer) testEmbeddedByValue() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QueryGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_QueryGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryGroups(ctx, req.(*QueryGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QueryUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_QueryUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryUsers(ctx, req.(*QueryUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.dashboard.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
		{
			MethodName: "QueryGroups",
			Handler:    _UserService_QueryGroups_Handler,
		},
		{
			MethodName: "QueryUsers",
			Handler:    _UserService_QueryUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}

const (
	PomeriumServiceAccountService_AddPomeriumServiceAccount_FullMethodName    = "/pomerium.dashboard.PomeriumServiceAccountService/AddPomeriumServiceAccount"
	PomeriumServiceAccountService_DeletePomeriumServiceAccount_FullMethodName = "/pomerium.dashboard.PomeriumServiceAccountService/DeletePomeriumServiceAccount"
	PomeriumServiceAccountService_GetPomeriumServiceAccount_FullMethodName    = "/pomerium.dashboard.PomeriumServiceAccountService/GetPomeriumServiceAccount"
	PomeriumServiceAccountService_ListPomeriumServiceAccounts_FullMethodName  = "/pomerium.dashboard.PomeriumServiceAccountService/ListPomeriumServiceAccounts"
	PomeriumServiceAccountService_SetPomeriumServiceAccount_FullMethodName    = "/pomerium.dashboard.PomeriumServiceAccountService/SetPomeriumServiceAccount"
)

// PomeriumServiceAccountServiceClient is the client API for PomeriumServiceAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PomeriumServiceAccountService manages service accounts for use with the
// pomerium console API
type PomeriumServiceAccountServiceClient interface {
	// AddPomeriumServiceAccount creates a new service account
	AddPomeriumServiceAccount(ctx context.Context, in *AddPomeriumServiceAccountRequest, opts ...grpc.CallOption) (*AddPomeriumServiceAccountResponse, error)
	// DeletePomeriumServiceAccount removes an existing service account
	DeletePomeriumServiceAccount(ctx context.Context, in *DeletePomeriumServiceAccountRequest, opts ...grpc.CallOption) (*DeletePomeriumServiceAccountResponse, error)
	// GetPomeriumServiceAccount retrieves an existing service account
	GetPomeriumServiceAccount(ctx context.Context, in *GetPomeriumServiceAccountRequest, opts ...grpc.CallOption) (*GetPomeriumServiceAccountResponse, error)
	// ListPomeriumServiceAccounts lists service accounts based on the parameters
	// in ListPomeriumServiceAccountsRequest
	ListPomeriumServiceAccounts(ctx context.Context, in *ListPomeriumServiceAccountsRequest, opts ...grpc.CallOption) (*ListPomeriumServiceAccountsResponse, error)
	SetPomeriumServiceAccount(ctx context.Context, in *SetPomeriumServiceAccountRequest, opts ...grpc.CallOption) (*SetPomeriumServiceAccountResponse, error)
}

type pomeriumServiceAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPomeriumServiceAccountServiceClient(cc grpc.ClientConnInterface) PomeriumServiceAccountServiceClient {
	return &pomeriumServiceAccountServiceClient{cc}
}

func (c *pomeriumServiceAccountServiceClient) AddPomeriumServiceAccount(ctx context.Context, in *AddPomeriumServiceAccountRequest, opts ...grpc.CallOption) (*AddPomeriumServiceAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPomeriumServiceAccountResponse)
	err := c.cc.Invoke(ctx, PomeriumServiceAccountService_AddPomeriumServiceAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pomeriumServiceAccountServiceClient) DeletePomeriumServiceAccount(ctx context.Context, in *DeletePomeriumServiceAccountRequest, opts ...grpc.CallOption) (*DeletePomeriumServiceAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePomeriumServiceAccountResponse)
	err := c.cc.Invoke(ctx, PomeriumServiceAccountService_DeletePomeriumServiceAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pomeriumServiceAccountServiceClient) GetPomeriumServiceAccount(ctx context.Context, in *GetPomeriumServiceAccountRequest, opts ...grpc.CallOption) (*GetPomeriumServiceAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPomeriumServiceAccountResponse)
	err := c.cc.Invoke(ctx, PomeriumServiceAccountService_GetPomeriumServiceAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pomeriumServiceAccountServiceClient) ListPomeriumServiceAccounts(ctx context.Context, in *ListPomeriumServiceAccountsRequest, opts ...grpc.CallOption) (*ListPomeriumServiceAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPomeriumServiceAccountsResponse)
	err := c.cc.Invoke(ctx, PomeriumServiceAccountService_ListPomeriumServiceAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pomeriumServiceAccountServiceClient) SetPomeriumServiceAccount(ctx context.Context, in *SetPomeriumServiceAccountRequest, opts ...grpc.CallOption) (*SetPomeriumServiceAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPomeriumServiceAccountResponse)
	err := c.cc.Invoke(ctx, PomeriumServiceAccountService_SetPomeriumServiceAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PomeriumServiceAccountServiceServer is the server API for PomeriumServiceAccountService service.
// All implementations should embed UnimplementedPomeriumServiceAccountServiceServer
// for forward compatibility.
//
// PomeriumServiceAccountService manages service accounts for use with the
// pomerium console API
type PomeriumServiceAccountServiceServer interface {
	// AddPomeriumServiceAccount creates a new service account
	AddPomeriumServiceAccount(context.Context, *AddPomeriumServiceAccountRequest) (*AddPomeriumServiceAccountResponse, error)
	// DeletePomeriumServiceAccount removes an existing service account
	DeletePomeriumServiceAccount(context.Context, *DeletePomeriumServiceAccountRequest) (*DeletePomeriumServiceAccountResponse, error)
	// GetPomeriumServiceAccount retrieves an existing service account
	GetPomeriumServiceAccount(context.Context, *GetPomeriumServiceAccountRequest) (*GetPomeriumServiceAccountResponse, error)
	// ListPomeriumServiceAccounts lists service accounts based on the parameters
	// in ListPomeriumServiceAccountsRequest
	ListPomeriumServiceAccounts(context.Context, *ListPomeriumServiceAccountsRequest) (*ListPomeriumServiceAccountsResponse, error)
	SetPomeriumServiceAccount(context.Context, *SetPomeriumServiceAccountRequest) (*SetPomeriumServiceAccountResponse, error)
}

// UnimplementedPomeriumServiceAccountServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPomeriumServiceAccountServiceServer struct{}

func (UnimplementedPomeriumServiceAccountServiceServer) AddPomeriumServiceAccount(context.Context, *AddPomeriumServiceAccountRequest) (*AddPomeriumServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPomeriumServiceAccount not implemented")
}
func (UnimplementedPomeriumServiceAccountServiceServer) DeletePomeriumServiceAccount(context.Context, *DeletePomeriumServiceAccountRequest) (*DeletePomeriumServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePomeriumServiceAccount not implemented")
}
func (UnimplementedPomeriumServiceAccountServiceServer) GetPomeriumServiceAccount(context.Context, *GetPomeriumServiceAccountRequest) (*GetPomeriumServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPomeriumServiceAccount not implemented")
}
func (UnimplementedPomeriumServiceAccountServiceServer) ListPomeriumServiceAccounts(context.Context, *ListPomeriumServiceAccountsRequest) (*ListPomeriumServiceAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPomeriumServiceAccounts not implemented")
}
func (UnimplementedPomeriumServiceAccountServiceServer) SetPomeriumServiceAccount(context.Context, *SetPomeriumServiceAccountRequest) (*SetPomeriumServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPomeriumServiceAccount not implemented")
}
func (UnimplementedPomeriumServiceAccountServiceServer) testEmbeddedByValue() {}

// UnsafePomeriumServiceAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PomeriumServiceAccountServiceServer will
// result in compilation errors.
type UnsafePomeriumServiceAccountServiceServer interface {
	mustEmbedUnimplementedPomeriumServiceAccountServiceServer()
}

func RegisterPomeriumServiceAccountServiceServer(s grpc.ServiceRegistrar, srv PomeriumServiceAccountServiceServer) {
	// If the following call pancis, it indicates UnimplementedPomeriumServiceAccountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PomeriumServiceAccountService_ServiceDesc, srv)
}

func _PomeriumServiceAccountService_AddPomeriumServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPomeriumServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PomeriumServiceAccountServiceServer).AddPomeriumServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PomeriumServiceAccountService_AddPomeriumServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PomeriumServiceAccountServiceServer).AddPomeriumServiceAccount(ctx, req.(*AddPomeriumServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PomeriumServiceAccountService_DeletePomeriumServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePomeriumServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PomeriumServiceAccountServiceServer).DeletePomeriumServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PomeriumServiceAccountService_DeletePomeriumServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PomeriumServiceAccountServiceServer).DeletePomeriumServiceAccount(ctx, req.(*DeletePomeriumServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PomeriumServiceAccountService_GetPomeriumServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPomeriumServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PomeriumServiceAccountServiceServer).GetPomeriumServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PomeriumServiceAccountService_GetPomeriumServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PomeriumServiceAccountServiceServer).GetPomeriumServiceAccount(ctx, req.(*GetPomeriumServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PomeriumServiceAccountService_ListPomeriumServiceAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPomeriumServiceAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PomeriumServiceAccountServiceServer).ListPomeriumServiceAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PomeriumServiceAccountService_ListPomeriumServiceAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PomeriumServiceAccountServiceServer).ListPomeriumServiceAccounts(ctx, req.(*ListPomeriumServiceAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PomeriumServiceAccountService_SetPomeriumServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPomeriumServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PomeriumServiceAccountServiceServer).SetPomeriumServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PomeriumServiceAccountService_SetPomeriumServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PomeriumServiceAccountServiceServer).SetPomeriumServiceAccount(ctx, req.(*SetPomeriumServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PomeriumServiceAccountService_ServiceDesc is the grpc.ServiceDesc for PomeriumServiceAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PomeriumServiceAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.dashboard.PomeriumServiceAccountService",
	HandlerType: (*PomeriumServiceAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPomeriumServiceAccount",
			Handler:    _PomeriumServiceAccountService_AddPomeriumServiceAccount_Handler,
		},
		{
			MethodName: "DeletePomeriumServiceAccount",
			Handler:    _PomeriumServiceAccountService_DeletePomeriumServiceAccount_Handler,
		},
		{
			MethodName: "GetPomeriumServiceAccount",
			Handler:    _PomeriumServiceAccountService_GetPomeriumServiceAccount_Handler,
		},
		{
			MethodName: "ListPomeriumServiceAccounts",
			Handler:    _PomeriumServiceAccountService_ListPomeriumServiceAccounts_Handler,
		},
		{
			MethodName: "SetPomeriumServiceAccount",
			Handler:    _PomeriumServiceAccountService_SetPomeriumServiceAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}

const (
	PomeriumSessionService_DeletePomeriumSession_FullMethodName = "/pomerium.dashboard.PomeriumSessionService/DeletePomeriumSession"
	PomeriumSessionService_GetPomeriumSession_FullMethodName    = "/pomerium.dashboard.PomeriumSessionService/GetPomeriumSession"
	PomeriumSessionService_Impersonate_FullMethodName           = "/pomerium.dashboard.PomeriumSessionService/Impersonate"
	PomeriumSessionService_ListPomeriumSessions_FullMethodName  = "/pomerium.dashboard.PomeriumSessionService/ListPomeriumSessions"
)

// PomeriumSessionServiceClient is the client API for PomeriumSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PomeriumSessionService manages user sessions inside the databroker
type PomeriumSessionServiceClient interface {
	// DeletePomeriumSession clears an existing user session
	DeletePomeriumSession(ctx context.Context, in *DeletePomeriumSessionRequest, opts ...grpc.CallOption) (*DeletePomeriumSessionResponse, error)
	// GetPomeriumSession retrieves information about an existing user session
	GetPomeriumSession(ctx context.Context, in *GetPomeriumSessionRequest, opts ...grpc.CallOption) (*GetPomeriumSessionResponse, error)
	// Impersonate updates an existing session to impersonate another identity
	Impersonate(ctx context.Context, in *ImpersonateRequest, opts ...grpc.CallOption) (*ImpersonateResponse, error)
	// ListPomeriumSessions lists existing sessions based on the parameters of
	// ListPomeriumSessionsRequest
	ListPomeriumSessions(ctx context.Context, in *ListPomeriumSessionsRequest, opts ...grpc.CallOption) (*ListPomeriumSessionsResponse, error)
}

type pomeriumSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPomeriumSessionServiceClient(cc grpc.ClientConnInterface) PomeriumSessionServiceClient {
	return &pomeriumSessionServiceClient{cc}
}

func (c *pomeriumSessionServiceClient) DeletePomeriumSession(ctx context.Context, in *DeletePomeriumSessionRequest, opts ...grpc.CallOption) (*DeletePomeriumSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePomeriumSessionResponse)
	err := c.cc.Invoke(ctx, PomeriumSessionService_DeletePomeriumSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pomeriumSessionServiceClient) GetPomeriumSession(ctx context.Context, in *GetPomeriumSessionRequest, opts ...grpc.CallOption) (*GetPomeriumSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPomeriumSessionResponse)
	err := c.cc.Invoke(ctx, PomeriumSessionService_GetPomeriumSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pomeriumSessionServiceClient) Impersonate(ctx context.Context, in *ImpersonateRequest, opts ...grpc.CallOption) (*ImpersonateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImpersonateResponse)
	err := c.cc.Invoke(ctx, PomeriumSessionService_Impersonate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pomeriumSessionServiceClient) ListPomeriumSessions(ctx context.Context, in *ListPomeriumSessionsRequest, opts ...grpc.CallOption) (*ListPomeriumSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPomeriumSessionsResponse)
	err := c.cc.Invoke(ctx, PomeriumSessionService_ListPomeriumSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PomeriumSessionServiceServer is the server API for PomeriumSessionService service.
// All implementations should embed UnimplementedPomeriumSessionServiceServer
// for forward compatibility.
//
// PomeriumSessionService manages user sessions inside the databroker
type PomeriumSessionServiceServer interface {
	// DeletePomeriumSession clears an existing user session
	DeletePomeriumSession(context.Context, *DeletePomeriumSessionRequest) (*DeletePomeriumSessionResponse, error)
	// GetPomeriumSession retrieves information about an existing user session
	GetPomeriumSession(context.Context, *GetPomeriumSessionRequest) (*GetPomeriumSessionResponse, error)
	// Impersonate updates an existing session to impersonate another identity
	Impersonate(context.Context, *ImpersonateRequest) (*ImpersonateResponse, error)
	// ListPomeriumSessions lists existing sessions based on the parameters of
	// ListPomeriumSessionsRequest
	ListPomeriumSessions(context.Context, *ListPomeriumSessionsRequest) (*ListPomeriumSessionsResponse, error)
}

// UnimplementedPomeriumSessionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPomeriumSessionServiceServer struct{}

func (UnimplementedPomeriumSessionServiceServer) DeletePomeriumSession(context.Context, *DeletePomeriumSessionRequest) (*DeletePomeriumSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePomeriumSession not implemented")
}
func (UnimplementedPomeriumSessionServiceServer) GetPomeriumSession(context.Context, *GetPomeriumSessionRequest) (*GetPomeriumSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPomeriumSession not implemented")
}
func (UnimplementedPomeriumSessionServiceServer) Impersonate(context.Context, *ImpersonateRequest) (*ImpersonateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Impersonate not implemented")
}
func (UnimplementedPomeriumSessionServiceServer) ListPomeriumSessions(context.Context, *ListPomeriumSessionsRequest) (*ListPomeriumSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPomeriumSessions not implemented")
}
func (UnimplementedPomeriumSessionServiceServer) testEmbeddedByValue() {}

// UnsafePomeriumSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PomeriumSessionServiceServer will
// result in compilation errors.
type UnsafePomeriumSessionServiceServer interface {
	mustEmbedUnimplementedPomeriumSessionServiceServer()
}

func RegisterPomeriumSessionServiceServer(s grpc.ServiceRegistrar, srv PomeriumSessionServiceServer) {
	// If the following call pancis, it indicates UnimplementedPomeriumSessionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PomeriumSessionService_ServiceDesc, srv)
}

func _PomeriumSessionService_DeletePomeriumSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePomeriumSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PomeriumSessionServiceServer).DeletePomeriumSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PomeriumSessionService_DeletePomeriumSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PomeriumSessionServiceServer).DeletePomeriumSession(ctx, req.(*DeletePomeriumSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PomeriumSessionService_GetPomeriumSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPomeriumSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PomeriumSessionServiceServer).GetPomeriumSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PomeriumSessionService_GetPomeriumSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PomeriumSessionServiceServer).GetPomeriumSession(ctx, req.(*GetPomeriumSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PomeriumSessionService_Impersonate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImpersonateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PomeriumSessionServiceServer).Impersonate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PomeriumSessionService_Impersonate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PomeriumSessionServiceServer).Impersonate(ctx, req.(*ImpersonateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PomeriumSessionService_ListPomeriumSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPomeriumSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PomeriumSessionServiceServer).ListPomeriumSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PomeriumSessionService_ListPomeriumSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PomeriumSessionServiceServer).ListPomeriumSessions(ctx, req.(*ListPomeriumSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PomeriumSessionService_ServiceDesc is the grpc.ServiceDesc for PomeriumSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PomeriumSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.dashboard.PomeriumSessionService",
	HandlerType: (*PomeriumSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeletePomeriumSession",
			Handler:    _PomeriumSessionService_DeletePomeriumSession_Handler,
		},
		{
			MethodName: "GetPomeriumSession",
			Handler:    _PomeriumSessionService_GetPomeriumSession_Handler,
		},
		{
			MethodName: "Impersonate",
			Handler:    _PomeriumSessionService_Impersonate_Handler,
		},
		{
			MethodName: "ListPomeriumSessions",
			Handler:    _PomeriumSessionService_ListPomeriumSessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}
