// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: activity_log.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ActivityLogService_GetActivityLogEntry_FullMethodName    = "/pomerium.dashboard.ActivityLogService/GetActivityLogEntry"
	ActivityLogService_ListActivityLogEntries_FullMethodName = "/pomerium.dashboard.ActivityLogService/ListActivityLogEntries"
)

// ActivityLogServiceClient is the client API for ActivityLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ActivityLogService tracks historical changes to configuration made through
// Pomerium Enterprise
type ActivityLogServiceClient interface {
	// GetActivityLogEntry retrieves a specific activity log entry
	GetActivityLogEntry(ctx context.Context, in *GetActivityLogEntryRequest, opts ...grpc.CallOption) (*GetActivityLogEntryResponse, error)
	// ListActivityLogEntries lists activity log entries based on paramters in the
	// ListActivityLogEntriesRequest
	ListActivityLogEntries(ctx context.Context, in *ListActivityLogEntriesRequest, opts ...grpc.CallOption) (*ListActivityLogEntriesResponse, error)
}

type activityLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityLogServiceClient(cc grpc.ClientConnInterface) ActivityLogServiceClient {
	return &activityLogServiceClient{cc}
}

func (c *activityLogServiceClient) GetActivityLogEntry(ctx context.Context, in *GetActivityLogEntryRequest, opts ...grpc.CallOption) (*GetActivityLogEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActivityLogEntryResponse)
	err := c.cc.Invoke(ctx, ActivityLogService_GetActivityLogEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityLogServiceClient) ListActivityLogEntries(ctx context.Context, in *ListActivityLogEntriesRequest, opts ...grpc.CallOption) (*ListActivityLogEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListActivityLogEntriesResponse)
	err := c.cc.Invoke(ctx, ActivityLogService_ListActivityLogEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityLogServiceServer is the server API for ActivityLogService service.
// All implementations should embed UnimplementedActivityLogServiceServer
// for forward compatibility.
//
// ActivityLogService tracks historical changes to configuration made through
// Pomerium Enterprise
type ActivityLogServiceServer interface {
	// GetActivityLogEntry retrieves a specific activity log entry
	GetActivityLogEntry(context.Context, *GetActivityLogEntryRequest) (*GetActivityLogEntryResponse, error)
	// ListActivityLogEntries lists activity log entries based on paramters in the
	// ListActivityLogEntriesRequest
	ListActivityLogEntries(context.Context, *ListActivityLogEntriesRequest) (*ListActivityLogEntriesResponse, error)
}

// UnimplementedActivityLogServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActivityLogServiceServer struct{}

func (UnimplementedActivityLogServiceServer) GetActivityLogEntry(context.Context, *GetActivityLogEntryRequest) (*GetActivityLogEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityLogEntry not implemented")
}
func (UnimplementedActivityLogServiceServer) ListActivityLogEntries(context.Context, *ListActivityLogEntriesRequest) (*ListActivityLogEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActivityLogEntries not implemented")
}
func (UnimplementedActivityLogServiceServer) testEmbeddedByValue() {}

// UnsafeActivityLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityLogServiceServer will
// result in compilation errors.
type UnsafeActivityLogServiceServer interface {
	mustEmbedUnimplementedActivityLogServiceServer()
}

func RegisterActivityLogServiceServer(s grpc.ServiceRegistrar, srv ActivityLogServiceServer) {
	// If the following call pancis, it indicates UnimplementedActivityLogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ActivityLogService_ServiceDesc, srv)
}

func _ActivityLogService_GetActivityLogEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityLogEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityLogServiceServer).GetActivityLogEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityLogService_GetActivityLogEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityLogServiceServer).GetActivityLogEntry(ctx, req.(*GetActivityLogEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityLogService_ListActivityLogEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActivityLogEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityLogServiceServer).ListActivityLogEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityLogService_ListActivityLogEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityLogServiceServer).ListActivityLogEntries(ctx, req.(*ListActivityLogEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityLogService_ServiceDesc is the grpc.ServiceDesc for ActivityLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.dashboard.ActivityLogService",
	HandlerType: (*ActivityLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActivityLogEntry",
			Handler:    _ActivityLogService_GetActivityLogEntry_Handler,
		},
		{
			MethodName: "ListActivityLogEntries",
			Handler:    _ActivityLogService_ListActivityLogEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity_log.proto",
}
