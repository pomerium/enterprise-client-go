// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: route_redirect_action.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RedirectAction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RedirectAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedirectAction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RedirectActionMultiError,
// or nil if none found.
func (m *RedirectAction) ValidateAll() error {
	return m.validate(true)
}

func (m *RedirectAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_RedirectAction_HostRedirect_Pattern.MatchString(m.GetHostRedirect()) {
		err := RedirectActionValidationError{
			field:  "HostRedirect",
			reason: "value does not match regex pattern \"^[^\\x00\\n\\r]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PortRedirect

	if _, ok := RedirectAction_RedirectResponseCode_name[int32(m.GetResponseCode())]; !ok {
		err := RedirectActionValidationError{
			field:  "ResponseCode",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StripQuery

	switch v := m.SchemeRewriteSpecifier.(type) {
	case *RedirectAction_HttpsRedirect:
		if v == nil {
			err := RedirectActionValidationError{
				field:  "SchemeRewriteSpecifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for HttpsRedirect
	case *RedirectAction_SchemeRedirect:
		if v == nil {
			err := RedirectActionValidationError{
				field:  "SchemeRewriteSpecifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for SchemeRedirect
	default:
		_ = v // ensures v is used
	}
	switch v := m.PathRewriteSpecifier.(type) {
	case *RedirectAction_PathRedirect:
		if v == nil {
			err := RedirectActionValidationError{
				field:  "PathRewriteSpecifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_RedirectAction_PathRedirect_Pattern.MatchString(m.GetPathRedirect()) {
			err := RedirectActionValidationError{
				field:  "PathRedirect",
				reason: "value does not match regex pattern \"^[^\\x00\\n\\r]*$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *RedirectAction_PrefixRewrite:
		if v == nil {
			err := RedirectActionValidationError{
				field:  "PathRewriteSpecifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_RedirectAction_PrefixRewrite_Pattern.MatchString(m.GetPrefixRewrite()) {
			err := RedirectActionValidationError{
				field:  "PrefixRewrite",
				reason: "value does not match regex pattern \"^[^\\x00\\n\\r]*$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *RedirectAction_RegexRewrite:
		if v == nil {
			err := RedirectActionValidationError{
				field:  "PathRewriteSpecifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRegexRewrite()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RedirectActionValidationError{
						field:  "RegexRewrite",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RedirectActionValidationError{
						field:  "RegexRewrite",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegexRewrite()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RedirectActionValidationError{
					field:  "RegexRewrite",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RedirectActionMultiError(errors)
	}

	return nil
}

// RedirectActionMultiError is an error wrapping multiple validation errors
// returned by RedirectAction.ValidateAll() if the designated constraints
// aren't met.
type RedirectActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedirectActionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedirectActionMultiError) AllErrors() []error { return m }

// RedirectActionValidationError is the validation error returned by
// RedirectAction.Validate if the designated constraints aren't met.
type RedirectActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedirectActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedirectActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedirectActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedirectActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedirectActionValidationError) ErrorName() string { return "RedirectActionValidationError" }

// Error satisfies the builtin error interface
func (e RedirectActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedirectAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedirectActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedirectActionValidationError{}

var _RedirectAction_HostRedirect_Pattern = regexp.MustCompile("^[^\x00\n\r]*$")

var _RedirectAction_PathRedirect_Pattern = regexp.MustCompile("^[^\x00\n\r]*$")

var _RedirectAction_PrefixRewrite_Pattern = regexp.MustCompile("^[^\x00\n\r]*$")

// Validate checks the field values on RedirectAction_RegexMatchAndSubstitute
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RedirectAction_RegexMatchAndSubstitute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RedirectAction_RegexMatchAndSubstitute with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// RedirectAction_RegexMatchAndSubstituteMultiError, or nil if none found.
func (m *RedirectAction_RegexMatchAndSubstitute) ValidateAll() error {
	return m.validate(true)
}

func (m *RedirectAction_RegexMatchAndSubstitute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPattern()) < 1 {
		err := RedirectAction_RegexMatchAndSubstituteValidationError{
			field:  "Pattern",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RedirectAction_RegexMatchAndSubstitute_Substitution_Pattern.MatchString(m.GetSubstitution()) {
		err := RedirectAction_RegexMatchAndSubstituteValidationError{
			field:  "Substitution",
			reason: "value does not match regex pattern \"^[^\\x00\\n\\r]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RedirectAction_RegexMatchAndSubstituteMultiError(errors)
	}

	return nil
}

// RedirectAction_RegexMatchAndSubstituteMultiError is an error wrapping
// multiple validation errors returned by
// RedirectAction_RegexMatchAndSubstitute.ValidateAll() if the designated
// constraints aren't met.
type RedirectAction_RegexMatchAndSubstituteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedirectAction_RegexMatchAndSubstituteMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedirectAction_RegexMatchAndSubstituteMultiError) AllErrors() []error { return m }

// RedirectAction_RegexMatchAndSubstituteValidationError is the validation
// error returned by RedirectAction_RegexMatchAndSubstitute.Validate if the
// designated constraints aren't met.
type RedirectAction_RegexMatchAndSubstituteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedirectAction_RegexMatchAndSubstituteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedirectAction_RegexMatchAndSubstituteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedirectAction_RegexMatchAndSubstituteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedirectAction_RegexMatchAndSubstituteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedirectAction_RegexMatchAndSubstituteValidationError) ErrorName() string {
	return "RedirectAction_RegexMatchAndSubstituteValidationError"
}

// Error satisfies the builtin error interface
func (e RedirectAction_RegexMatchAndSubstituteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedirectAction_RegexMatchAndSubstitute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedirectAction_RegexMatchAndSubstituteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedirectAction_RegexMatchAndSubstituteValidationError{}

var _RedirectAction_RegexMatchAndSubstitute_Substitution_Pattern = regexp.MustCompile("^[^\x00\n\r]*$")
