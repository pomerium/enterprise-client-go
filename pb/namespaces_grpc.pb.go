// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.7
// source: namespaces.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NamespaceService_DeleteNamespace_FullMethodName        = "/pomerium.dashboard.NamespaceService/DeleteNamespace"
	NamespaceService_GetNamespace_FullMethodName           = "/pomerium.dashboard.NamespaceService/GetNamespace"
	NamespaceService_ListNamespaces_FullMethodName         = "/pomerium.dashboard.NamespaceService/ListNamespaces"
	NamespaceService_ListNamespaceResources_FullMethodName = "/pomerium.dashboard.NamespaceService/ListNamespaceResources"
	NamespaceService_SetNamespace_FullMethodName           = "/pomerium.dashboard.NamespaceService/SetNamespace"
)

// NamespaceServiceClient is the client API for NamespaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NamespaceService manages namespaces
type NamespaceServiceClient interface {
	// DeleteNamespace deletes a namespace
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	// GetNamespace retrieves a namespace
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	// ListNamespaces lists all namespaces
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	// ListNamespaceResources lists all the resources for a namespace.
	ListNamespaceResources(ctx context.Context, in *ListNamespaceResourcesRequest, opts ...grpc.CallOption) (*ListNamespaceResourcesResponse, error)
	// SetNamespace creates a namespace or, if the id is specified, updates an
	// existing namespace
	SetNamespace(ctx context.Context, in *SetNamespaceRequest, opts ...grpc.CallOption) (*SetNamespaceResponse, error)
}

type namespaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespaceServiceClient(cc grpc.ClientConnInterface) NamespaceServiceClient {
	return &namespaceServiceClient{cc}
}

func (c *namespaceServiceClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, NamespaceService_DeleteNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNamespaceResponse)
	err := c.cc.Invoke(ctx, NamespaceService_GetNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, NamespaceService_ListNamespaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) ListNamespaceResources(ctx context.Context, in *ListNamespaceResourcesRequest, opts ...grpc.CallOption) (*ListNamespaceResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamespaceResourcesResponse)
	err := c.cc.Invoke(ctx, NamespaceService_ListNamespaceResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) SetNamespace(ctx context.Context, in *SetNamespaceRequest, opts ...grpc.CallOption) (*SetNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetNamespaceResponse)
	err := c.cc.Invoke(ctx, NamespaceService_SetNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceServiceServer is the server API for NamespaceService service.
// All implementations should embed UnimplementedNamespaceServiceServer
// for forward compatibility.
//
// NamespaceService manages namespaces
type NamespaceServiceServer interface {
	// DeleteNamespace deletes a namespace
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	// GetNamespace retrieves a namespace
	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	// ListNamespaces lists all namespaces
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	// ListNamespaceResources lists all the resources for a namespace.
	ListNamespaceResources(context.Context, *ListNamespaceResourcesRequest) (*ListNamespaceResourcesResponse, error)
	// SetNamespace creates a namespace or, if the id is specified, updates an
	// existing namespace
	SetNamespace(context.Context, *SetNamespaceRequest) (*SetNamespaceResponse, error)
}

// UnimplementedNamespaceServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNamespaceServiceServer struct{}

func (UnimplementedNamespaceServiceServer) DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedNamespaceServiceServer) GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedNamespaceServiceServer) ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedNamespaceServiceServer) ListNamespaceResources(context.Context, *ListNamespaceResourcesRequest) (*ListNamespaceResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaceResources not implemented")
}
func (UnimplementedNamespaceServiceServer) SetNamespace(context.Context, *SetNamespaceRequest) (*SetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNamespace not implemented")
}
func (UnimplementedNamespaceServiceServer) testEmbeddedByValue() {}

// UnsafeNamespaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespaceServiceServer will
// result in compilation errors.
type UnsafeNamespaceServiceServer interface {
	mustEmbedUnimplementedNamespaceServiceServer()
}

func RegisterNamespaceServiceServer(s grpc.ServiceRegistrar, srv NamespaceServiceServer) {
	// If the following call pancis, it indicates UnimplementedNamespaceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NamespaceService_ServiceDesc, srv)
}

func _NamespaceService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceService_DeleteNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceService_GetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceService_ListNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_ListNamespaceResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespaceResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).ListNamespaceResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceService_ListNamespaceResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).ListNamespaceResources(ctx, req.(*ListNamespaceResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_SetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).SetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceService_SetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).SetNamespace(ctx, req.(*SetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NamespaceService_ServiceDesc is the grpc.ServiceDesc for NamespaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamespaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.dashboard.NamespaceService",
	HandlerType: (*NamespaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteNamespace",
			Handler:    _NamespaceService_DeleteNamespace_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _NamespaceService_GetNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _NamespaceService_ListNamespaces_Handler,
		},
		{
			MethodName: "ListNamespaceResources",
			Handler:    _NamespaceService_ListNamespaceResources_Handler,
		},
		{
			MethodName: "SetNamespace",
			Handler:    _NamespaceService_SetNamespace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "namespaces.proto",
}

const (
	NamespacePermissionService_DeleteNamespacePermission_FullMethodName     = "/pomerium.dashboard.NamespacePermissionService/DeleteNamespacePermission"
	NamespacePermissionService_GetNamespacePermission_FullMethodName        = "/pomerium.dashboard.NamespacePermissionService/GetNamespacePermission"
	NamespacePermissionService_ListNamespacePermissions_FullMethodName      = "/pomerium.dashboard.NamespacePermissionService/ListNamespacePermissions"
	NamespacePermissionService_ListNamespacePermissionGroups_FullMethodName = "/pomerium.dashboard.NamespacePermissionService/ListNamespacePermissionGroups"
	NamespacePermissionService_ListNamespacePermissionUsers_FullMethodName  = "/pomerium.dashboard.NamespacePermissionService/ListNamespacePermissionUsers"
	NamespacePermissionService_SetNamespacePermission_FullMethodName        = "/pomerium.dashboard.NamespacePermissionService/SetNamespacePermission"
)

// NamespacePermissionServiceClient is the client API for NamespacePermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NamespacePermissionService manages permissions set on namespaces
type NamespacePermissionServiceClient interface {
	// DeleteNamespacePermission removes an existing permission definition
	DeleteNamespacePermission(ctx context.Context, in *DeleteNamespacePermissionRequest, opts ...grpc.CallOption) (*DeleteNamespacePermissionResponse, error)
	// GetNamespacePermission retrieves an existing permission definition
	GetNamespacePermission(ctx context.Context, in *GetNamespacePermissionRequest, opts ...grpc.CallOption) (*GetNamespacePermissionResponse, error)
	// ListNamespacePermissions retrieves existing permissions for all namespaces
	ListNamespacePermissions(ctx context.Context, in *ListNamespacePermissionsRequest, opts ...grpc.CallOption) (*ListNamespacePermissionsResponse, error)
	// ListNamespacePermissionGroups retrieves existing group based permissions on
	// a namespace
	ListNamespacePermissionGroups(ctx context.Context, in *ListNamespacePermissionGroupsRequest, opts ...grpc.CallOption) (*ListNamespacePermissionGroupsResponse, error)
	// ListNamespacePermissionUsers retrieves existing user based permissions on a
	// namespace
	ListNamespacePermissionUsers(ctx context.Context, in *ListNamespacePermissionUsersRequest, opts ...grpc.CallOption) (*ListNamespacePermissionUsersResponse, error)
	// SetNamespacePermission set a new permission definition on a namespace
	SetNamespacePermission(ctx context.Context, in *SetNamespacePermissionRequest, opts ...grpc.CallOption) (*SetNamespacePermissionResponse, error)
}

type namespacePermissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespacePermissionServiceClient(cc grpc.ClientConnInterface) NamespacePermissionServiceClient {
	return &namespacePermissionServiceClient{cc}
}

func (c *namespacePermissionServiceClient) DeleteNamespacePermission(ctx context.Context, in *DeleteNamespacePermissionRequest, opts ...grpc.CallOption) (*DeleteNamespacePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNamespacePermissionResponse)
	err := c.cc.Invoke(ctx, NamespacePermissionService_DeleteNamespacePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacePermissionServiceClient) GetNamespacePermission(ctx context.Context, in *GetNamespacePermissionRequest, opts ...grpc.CallOption) (*GetNamespacePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNamespacePermissionResponse)
	err := c.cc.Invoke(ctx, NamespacePermissionService_GetNamespacePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacePermissionServiceClient) ListNamespacePermissions(ctx context.Context, in *ListNamespacePermissionsRequest, opts ...grpc.CallOption) (*ListNamespacePermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamespacePermissionsResponse)
	err := c.cc.Invoke(ctx, NamespacePermissionService_ListNamespacePermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacePermissionServiceClient) ListNamespacePermissionGroups(ctx context.Context, in *ListNamespacePermissionGroupsRequest, opts ...grpc.CallOption) (*ListNamespacePermissionGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamespacePermissionGroupsResponse)
	err := c.cc.Invoke(ctx, NamespacePermissionService_ListNamespacePermissionGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacePermissionServiceClient) ListNamespacePermissionUsers(ctx context.Context, in *ListNamespacePermissionUsersRequest, opts ...grpc.CallOption) (*ListNamespacePermissionUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamespacePermissionUsersResponse)
	err := c.cc.Invoke(ctx, NamespacePermissionService_ListNamespacePermissionUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespacePermissionServiceClient) SetNamespacePermission(ctx context.Context, in *SetNamespacePermissionRequest, opts ...grpc.CallOption) (*SetNamespacePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetNamespacePermissionResponse)
	err := c.cc.Invoke(ctx, NamespacePermissionService_SetNamespacePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespacePermissionServiceServer is the server API for NamespacePermissionService service.
// All implementations should embed UnimplementedNamespacePermissionServiceServer
// for forward compatibility.
//
// NamespacePermissionService manages permissions set on namespaces
type NamespacePermissionServiceServer interface {
	// DeleteNamespacePermission removes an existing permission definition
	DeleteNamespacePermission(context.Context, *DeleteNamespacePermissionRequest) (*DeleteNamespacePermissionResponse, error)
	// GetNamespacePermission retrieves an existing permission definition
	GetNamespacePermission(context.Context, *GetNamespacePermissionRequest) (*GetNamespacePermissionResponse, error)
	// ListNamespacePermissions retrieves existing permissions for all namespaces
	ListNamespacePermissions(context.Context, *ListNamespacePermissionsRequest) (*ListNamespacePermissionsResponse, error)
	// ListNamespacePermissionGroups retrieves existing group based permissions on
	// a namespace
	ListNamespacePermissionGroups(context.Context, *ListNamespacePermissionGroupsRequest) (*ListNamespacePermissionGroupsResponse, error)
	// ListNamespacePermissionUsers retrieves existing user based permissions on a
	// namespace
	ListNamespacePermissionUsers(context.Context, *ListNamespacePermissionUsersRequest) (*ListNamespacePermissionUsersResponse, error)
	// SetNamespacePermission set a new permission definition on a namespace
	SetNamespacePermission(context.Context, *SetNamespacePermissionRequest) (*SetNamespacePermissionResponse, error)
}

// UnimplementedNamespacePermissionServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNamespacePermissionServiceServer struct{}

func (UnimplementedNamespacePermissionServiceServer) DeleteNamespacePermission(context.Context, *DeleteNamespacePermissionRequest) (*DeleteNamespacePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespacePermission not implemented")
}
func (UnimplementedNamespacePermissionServiceServer) GetNamespacePermission(context.Context, *GetNamespacePermissionRequest) (*GetNamespacePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespacePermission not implemented")
}
func (UnimplementedNamespacePermissionServiceServer) ListNamespacePermissions(context.Context, *ListNamespacePermissionsRequest) (*ListNamespacePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespacePermissions not implemented")
}
func (UnimplementedNamespacePermissionServiceServer) ListNamespacePermissionGroups(context.Context, *ListNamespacePermissionGroupsRequest) (*ListNamespacePermissionGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespacePermissionGroups not implemented")
}
func (UnimplementedNamespacePermissionServiceServer) ListNamespacePermissionUsers(context.Context, *ListNamespacePermissionUsersRequest) (*ListNamespacePermissionUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespacePermissionUsers not implemented")
}
func (UnimplementedNamespacePermissionServiceServer) SetNamespacePermission(context.Context, *SetNamespacePermissionRequest) (*SetNamespacePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNamespacePermission not implemented")
}
func (UnimplementedNamespacePermissionServiceServer) testEmbeddedByValue() {}

// UnsafeNamespacePermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespacePermissionServiceServer will
// result in compilation errors.
type UnsafeNamespacePermissionServiceServer interface {
	mustEmbedUnimplementedNamespacePermissionServiceServer()
}

func RegisterNamespacePermissionServiceServer(s grpc.ServiceRegistrar, srv NamespacePermissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedNamespacePermissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NamespacePermissionService_ServiceDesc, srv)
}

func _NamespacePermissionService_DeleteNamespacePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespacePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacePermissionServiceServer).DeleteNamespacePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespacePermissionService_DeleteNamespacePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacePermissionServiceServer).DeleteNamespacePermission(ctx, req.(*DeleteNamespacePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespacePermissionService_GetNamespacePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespacePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacePermissionServiceServer).GetNamespacePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespacePermissionService_GetNamespacePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacePermissionServiceServer).GetNamespacePermission(ctx, req.(*GetNamespacePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespacePermissionService_ListNamespacePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacePermissionServiceServer).ListNamespacePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespacePermissionService_ListNamespacePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacePermissionServiceServer).ListNamespacePermissions(ctx, req.(*ListNamespacePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespacePermissionService_ListNamespacePermissionGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacePermissionGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacePermissionServiceServer).ListNamespacePermissionGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespacePermissionService_ListNamespacePermissionGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacePermissionServiceServer).ListNamespacePermissionGroups(ctx, req.(*ListNamespacePermissionGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespacePermissionService_ListNamespacePermissionUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacePermissionUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacePermissionServiceServer).ListNamespacePermissionUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespacePermissionService_ListNamespacePermissionUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacePermissionServiceServer).ListNamespacePermissionUsers(ctx, req.(*ListNamespacePermissionUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespacePermissionService_SetNamespacePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNamespacePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespacePermissionServiceServer).SetNamespacePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespacePermissionService_SetNamespacePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespacePermissionServiceServer).SetNamespacePermission(ctx, req.(*SetNamespacePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NamespacePermissionService_ServiceDesc is the grpc.ServiceDesc for NamespacePermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamespacePermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.dashboard.NamespacePermissionService",
	HandlerType: (*NamespacePermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteNamespacePermission",
			Handler:    _NamespacePermissionService_DeleteNamespacePermission_Handler,
		},
		{
			MethodName: "GetNamespacePermission",
			Handler:    _NamespacePermissionService_GetNamespacePermission_Handler,
		},
		{
			MethodName: "ListNamespacePermissions",
			Handler:    _NamespacePermissionService_ListNamespacePermissions_Handler,
		},
		{
			MethodName: "ListNamespacePermissionGroups",
			Handler:    _NamespacePermissionService_ListNamespacePermissionGroups_Handler,
		},
		{
			MethodName: "ListNamespacePermissionUsers",
			Handler:    _NamespacePermissionService_ListNamespacePermissionUsers_Handler,
		},
		{
			MethodName: "SetNamespacePermission",
			Handler:    _NamespacePermissionService_SetNamespacePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "namespaces.proto",
}
