// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.19.4
// source: tsdb.proto

package pb

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Rate defines time-sampled values
type Rate int32

const (
	// undefined means this is an actual value that is not sampled
	Rate_NONE Rate = 0
	// value represents <something> per second
	Rate_PER_SECOND Rate = 1
)

// Enum value maps for Rate.
var (
	Rate_name = map[int32]string{
		0: "NONE",
		1: "PER_SECOND",
	}
	Rate_value = map[string]int32{
		"NONE":       0,
		"PER_SECOND": 1,
	}
)

func (x Rate) Enum() *Rate {
	p := new(Rate)
	*p = x
	return p
}

func (x Rate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rate) Descriptor() protoreflect.EnumDescriptor {
	return file_tsdb_proto_enumTypes[0].Descriptor()
}

func (Rate) Type() protoreflect.EnumType {
	return &file_tsdb_proto_enumTypes[0]
}

func (x Rate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rate.Descriptor instead.
func (Rate) EnumDescriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{0}
}

// see
// https://www.envoyproxy.io/docs/envoy/latest/configuration/upstream/cluster_manager/cluster_stats
type Metric int32

const (
	Metric_UNDEFINED_METRIC_DO_NOT_USE Metric = 0
	// request counter
	Metric_REQUESTS Metric = 1
	// request rate (per second)
	Metric_REQUESTS_RATE Metric = 2
	// duration of the request in milliseconds - this is a histogram counter and
	// requires percentile
	Metric_REQUESTS_DURATION_MS Metric = 3
	// returns distribution of response codes
	Metric_RESPONSE_CODES Metric = 4
	// Total responses from the authz filter (note that does not imply that
	// requests were allowed to pass thru)
	Metric_AUTHZ_OK Metric = 20
	// Total responses from the authorizations service that were to deny the
	// traffic.
	Metric_AUTHZ_DENIED Metric = 21
	// Total errors contacting the external service.
	Metric_AUTHZ_ERROR Metric = 22
	// Total requests that are allowed without calling external services due to
	// the filter is disabled.
	Metric_AUTHZ_DISABLED Metric = 23
	// Total requests that were error(s) but were allowed through because of
	// failure_mode_allow set to true.
	Metric_AUTHZ_FAILURE_MODE_ALLOWED Metric = 24
	// Current cluster healthy total (inclusive of both health checking and
	// outlier detection)
	Metric_MEMBERSHIP_HEALTHY Metric = 30
	// Current cluster degraded total
	Metric_MEMBERSHIP_DEGRADED Metric = 31
	// Current cluster excluded total
	Metric_MEMBERSHIP_EXCLUDED Metric = 32
	// Current cluster membership total
	Metric_MEMBERSHIP_TOTAL Metric = 33
	// bytes received - upstream_cx_rx_bytes_total
	Metric_RX_BYTES Metric = 40
	// bytes sent - upstream_cx_tx_bytes_total
	Metric_TX_BYTES Metric = 41
	// total of rx + tx bytes
	Metric_TOTAL_BYTES Metric = 42
	//
	//system metrics
	Metric_MEMORY_ALLOCATED Metric = 51
	Metric_CPU_USAGE        Metric = 52
	//
	//identity provider specific
	Metric_IDP_LAST_REFRESH_TIMESTAMP                    Metric = 60
	Metric_IDP_LAST_USER_REFRESH_SUCCESS_TIMESTAMP       Metric = 100
	Metric_IDP_LAST_USER_REFRESH_ERROR_TIMESTAMP         Metric = 101
	Metric_IDP_LAST_USER_REFRESH_ERROR                   Metric = 102
	Metric_IDP_LAST_USER_REFRESH_SUCCESS                 Metric = 103
	Metric_IDP_LAST_USER_GROUP_REFRESH_SUCCESS_TIMESTAMP Metric = 104
	Metric_IDP_LAST_USER_GROUP_REFRESH_ERROR_TIMESTAMP   Metric = 105
	Metric_IDP_LAST_USER_GROUP_REFRESH_ERROR             Metric = 106
	Metric_IDP_LAST_USER_GROUP_REFRESH_SUCCESS           Metric = 107
	Metric_IDP_LAST_SESSION_REFRESH_SUCCESS_TIMESTAMP    Metric = 108
	Metric_IDP_LAST_SESSION_REFRESH_ERROR_TIMESTAMP      Metric = 109
	Metric_IDP_LAST_SESSION_REFRESH_ERROR                Metric = 110
	Metric_IDP_LAST_SESSION_REFRESH_SUCCESS              Metric = 111
	//
	//configuration related
	Metric_CONFIG_LAST_RELOAD_SUCCESS_TIMESTAMP Metric = 70
	Metric_BUILD_INFO                           Metric = 71
	Metric_CONFIG_CHECKSUM_LOCAL                Metric = 72
	Metric_CONFIG_CHECKSUM_DATABROKER           Metric = 73
	Metric_CONFIG_VERSION                       Metric = 74
	Metric_CONFIG_ERRORS                        Metric = 75
	Metric_CONFIG_CONSOLE_VERSION               Metric = 76
	// prometheus metrics
	Metric_PROMETHEUS_STORAGE_BYTES Metric = 80
	// console metrics
	Metric_MONTHLY_ACTIVE_USERS_THRESHOLD Metric = 90
	Metric_MONTHLY_ACTIVE_USERS           Metric = 91
)

// Enum value maps for Metric.
var (
	Metric_name = map[int32]string{
		0:   "UNDEFINED_METRIC_DO_NOT_USE",
		1:   "REQUESTS",
		2:   "REQUESTS_RATE",
		3:   "REQUESTS_DURATION_MS",
		4:   "RESPONSE_CODES",
		20:  "AUTHZ_OK",
		21:  "AUTHZ_DENIED",
		22:  "AUTHZ_ERROR",
		23:  "AUTHZ_DISABLED",
		24:  "AUTHZ_FAILURE_MODE_ALLOWED",
		30:  "MEMBERSHIP_HEALTHY",
		31:  "MEMBERSHIP_DEGRADED",
		32:  "MEMBERSHIP_EXCLUDED",
		33:  "MEMBERSHIP_TOTAL",
		40:  "RX_BYTES",
		41:  "TX_BYTES",
		42:  "TOTAL_BYTES",
		51:  "MEMORY_ALLOCATED",
		52:  "CPU_USAGE",
		60:  "IDP_LAST_REFRESH_TIMESTAMP",
		100: "IDP_LAST_USER_REFRESH_SUCCESS_TIMESTAMP",
		101: "IDP_LAST_USER_REFRESH_ERROR_TIMESTAMP",
		102: "IDP_LAST_USER_REFRESH_ERROR",
		103: "IDP_LAST_USER_REFRESH_SUCCESS",
		104: "IDP_LAST_USER_GROUP_REFRESH_SUCCESS_TIMESTAMP",
		105: "IDP_LAST_USER_GROUP_REFRESH_ERROR_TIMESTAMP",
		106: "IDP_LAST_USER_GROUP_REFRESH_ERROR",
		107: "IDP_LAST_USER_GROUP_REFRESH_SUCCESS",
		108: "IDP_LAST_SESSION_REFRESH_SUCCESS_TIMESTAMP",
		109: "IDP_LAST_SESSION_REFRESH_ERROR_TIMESTAMP",
		110: "IDP_LAST_SESSION_REFRESH_ERROR",
		111: "IDP_LAST_SESSION_REFRESH_SUCCESS",
		70:  "CONFIG_LAST_RELOAD_SUCCESS_TIMESTAMP",
		71:  "BUILD_INFO",
		72:  "CONFIG_CHECKSUM_LOCAL",
		73:  "CONFIG_CHECKSUM_DATABROKER",
		74:  "CONFIG_VERSION",
		75:  "CONFIG_ERRORS",
		76:  "CONFIG_CONSOLE_VERSION",
		80:  "PROMETHEUS_STORAGE_BYTES",
		90:  "MONTHLY_ACTIVE_USERS_THRESHOLD",
		91:  "MONTHLY_ACTIVE_USERS",
	}
	Metric_value = map[string]int32{
		"UNDEFINED_METRIC_DO_NOT_USE": 0,
		"REQUESTS":                    1,
		"REQUESTS_RATE":               2,
		"REQUESTS_DURATION_MS":        3,
		"RESPONSE_CODES":              4,
		"AUTHZ_OK":                    20,
		"AUTHZ_DENIED":                21,
		"AUTHZ_ERROR":                 22,
		"AUTHZ_DISABLED":              23,
		"AUTHZ_FAILURE_MODE_ALLOWED":  24,
		"MEMBERSHIP_HEALTHY":          30,
		"MEMBERSHIP_DEGRADED":         31,
		"MEMBERSHIP_EXCLUDED":         32,
		"MEMBERSHIP_TOTAL":            33,
		"RX_BYTES":                    40,
		"TX_BYTES":                    41,
		"TOTAL_BYTES":                 42,
		"MEMORY_ALLOCATED":            51,
		"CPU_USAGE":                   52,
		"IDP_LAST_REFRESH_TIMESTAMP":  60,
		"IDP_LAST_USER_REFRESH_SUCCESS_TIMESTAMP":       100,
		"IDP_LAST_USER_REFRESH_ERROR_TIMESTAMP":         101,
		"IDP_LAST_USER_REFRESH_ERROR":                   102,
		"IDP_LAST_USER_REFRESH_SUCCESS":                 103,
		"IDP_LAST_USER_GROUP_REFRESH_SUCCESS_TIMESTAMP": 104,
		"IDP_LAST_USER_GROUP_REFRESH_ERROR_TIMESTAMP":   105,
		"IDP_LAST_USER_GROUP_REFRESH_ERROR":             106,
		"IDP_LAST_USER_GROUP_REFRESH_SUCCESS":           107,
		"IDP_LAST_SESSION_REFRESH_SUCCESS_TIMESTAMP":    108,
		"IDP_LAST_SESSION_REFRESH_ERROR_TIMESTAMP":      109,
		"IDP_LAST_SESSION_REFRESH_ERROR":                110,
		"IDP_LAST_SESSION_REFRESH_SUCCESS":              111,
		"CONFIG_LAST_RELOAD_SUCCESS_TIMESTAMP":          70,
		"BUILD_INFO":                                    71,
		"CONFIG_CHECKSUM_LOCAL":                         72,
		"CONFIG_CHECKSUM_DATABROKER":                    73,
		"CONFIG_VERSION":                                74,
		"CONFIG_ERRORS":                                 75,
		"CONFIG_CONSOLE_VERSION":                        76,
		"PROMETHEUS_STORAGE_BYTES":                      80,
		"MONTHLY_ACTIVE_USERS_THRESHOLD":                90,
		"MONTHLY_ACTIVE_USERS":                          91,
	}
)

func (x Metric) Enum() *Metric {
	p := new(Metric)
	*p = x
	return p
}

func (x Metric) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metric) Descriptor() protoreflect.EnumDescriptor {
	return file_tsdb_proto_enumTypes[1].Descriptor()
}

func (Metric) Type() protoreflect.EnumType {
	return &file_tsdb_proto_enumTypes[1]
}

func (x Metric) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metric.Descriptor instead.
func (Metric) EnumDescriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{1}
}

type Component int32

const (
	Component_UNKNOWN_DO_NOT_USE Component = 0
	Component_AUTHENTICATE       Component = 1
	Component_AUTHORIZE          Component = 2
	Component_DATABROKER         Component = 3
	Component_CONSOLE            Component = 4
	Component_PROXY              Component = 5
	// used when all components are running in the all-in-one mode
	Component_ALL_IN_ONE Component = 6
	// Proxy envoy is always reported separately
	Component_PROXY_ENVOY Component = 7
	Component_PROMETHEUS  Component = 8
)

// Enum value maps for Component.
var (
	Component_name = map[int32]string{
		0: "UNKNOWN_DO_NOT_USE",
		1: "AUTHENTICATE",
		2: "AUTHORIZE",
		3: "DATABROKER",
		4: "CONSOLE",
		5: "PROXY",
		6: "ALL_IN_ONE",
		7: "PROXY_ENVOY",
		8: "PROMETHEUS",
	}
	Component_value = map[string]int32{
		"UNKNOWN_DO_NOT_USE": 0,
		"AUTHENTICATE":       1,
		"AUTHORIZE":          2,
		"DATABROKER":         3,
		"CONSOLE":            4,
		"PROXY":              5,
		"ALL_IN_ONE":         6,
		"PROXY_ENVOY":        7,
		"PROMETHEUS":         8,
	}
)

func (x Component) Enum() *Component {
	p := new(Component)
	*p = x
	return p
}

func (x Component) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Component) Descriptor() protoreflect.EnumDescriptor {
	return file_tsdb_proto_enumTypes[2].Descriptor()
}

func (Component) Type() protoreflect.EnumType {
	return &file_tsdb_proto_enumTypes[2]
}

func (x Component) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Component.Descriptor instead.
func (Component) EnumDescriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{2}
}

type UptimeResponse_Status int32

const (
	UptimeResponse_UNDEFINED_STATUS_DO_NOT_USE UptimeResponse_Status = 0
	// fully operational
	UptimeResponse_LIVE UptimeResponse_Status = 1
	// no data is available for the period in the prometheus
	UptimeResponse_NO_DATA UptimeResponse_Status = 2
	// prometheus is up but the scraping instance is down
	UptimeResponse_DOWN UptimeResponse_Status = 3
)

// Enum value maps for UptimeResponse_Status.
var (
	UptimeResponse_Status_name = map[int32]string{
		0: "UNDEFINED_STATUS_DO_NOT_USE",
		1: "LIVE",
		2: "NO_DATA",
		3: "DOWN",
	}
	UptimeResponse_Status_value = map[string]int32{
		"UNDEFINED_STATUS_DO_NOT_USE": 0,
		"LIVE":                        1,
		"NO_DATA":                     2,
		"DOWN":                        3,
	}
)

func (x UptimeResponse_Status) Enum() *UptimeResponse_Status {
	p := new(UptimeResponse_Status)
	*p = x
	return p
}

func (x UptimeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UptimeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_tsdb_proto_enumTypes[3].Descriptor()
}

func (UptimeResponse_Status) Type() protoreflect.EnumType {
	return &file_tsdb_proto_enumTypes[3]
}

func (x UptimeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UptimeResponse_Status.Descriptor instead.
func (UptimeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{21, 0}
}

type GetStatusResponse_Target_Health int32

const (
	GetStatusResponse_Target_TARGET_HEALTH_UNKNOWN GetStatusResponse_Target_Health = 0
	GetStatusResponse_Target_TARGET_HEALTH_UP      GetStatusResponse_Target_Health = 1
	GetStatusResponse_Target_TARGET_HEALTH_DOWN    GetStatusResponse_Target_Health = 2
)

// Enum value maps for GetStatusResponse_Target_Health.
var (
	GetStatusResponse_Target_Health_name = map[int32]string{
		0: "TARGET_HEALTH_UNKNOWN",
		1: "TARGET_HEALTH_UP",
		2: "TARGET_HEALTH_DOWN",
	}
	GetStatusResponse_Target_Health_value = map[string]int32{
		"TARGET_HEALTH_UNKNOWN": 0,
		"TARGET_HEALTH_UP":      1,
		"TARGET_HEALTH_DOWN":    2,
	}
)

func (x GetStatusResponse_Target_Health) Enum() *GetStatusResponse_Target_Health {
	p := new(GetStatusResponse_Target_Health)
	*p = x
	return p
}

func (x GetStatusResponse_Target_Health) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetStatusResponse_Target_Health) Descriptor() protoreflect.EnumDescriptor {
	return file_tsdb_proto_enumTypes[4].Descriptor()
}

func (GetStatusResponse_Target_Health) Type() protoreflect.EnumType {
	return &file_tsdb_proto_enumTypes[4]
}

func (x GetStatusResponse_Target_Health) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetStatusResponse_Target_Health.Descriptor instead.
func (GetStatusResponse_Target_Health) EnumDescriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{26, 0, 0}
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start time
	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// End time
	End *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	// Max time between two slices within [start:end]
	Step *durationpb.Duration `protobuf:"bytes,3,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{0}
}

func (x *Range) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Range) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Range) GetStep() *durationpb.Duration {
	if x != nil {
		return x.Step
	}
	return nil
}

// RouteMatcher may be used to query data for multiple routes
type RouteMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Matcher:
	//	*RouteMatcher_RouteId
	//	*RouteMatcher_NamespaceId
	Matcher isRouteMatcher_Matcher `protobuf_oneof:"matcher"`
}

func (x *RouteMatcher) Reset() {
	*x = RouteMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMatcher) ProtoMessage() {}

func (x *RouteMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMatcher.ProtoReflect.Descriptor instead.
func (*RouteMatcher) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{1}
}

func (m *RouteMatcher) GetMatcher() isRouteMatcher_Matcher {
	if m != nil {
		return m.Matcher
	}
	return nil
}

func (x *RouteMatcher) GetRouteId() string {
	if x, ok := x.GetMatcher().(*RouteMatcher_RouteId); ok {
		return x.RouteId
	}
	return ""
}

func (x *RouteMatcher) GetNamespaceId() string {
	if x, ok := x.GetMatcher().(*RouteMatcher_NamespaceId); ok {
		return x.NamespaceId
	}
	return ""
}

type isRouteMatcher_Matcher interface {
	isRouteMatcher_Matcher()
}

type RouteMatcher_RouteId struct {
	// route database ID
	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3,oneof"`
}

type RouteMatcher_NamespaceId struct {
	// namespace ID
	NamespaceId string `protobuf:"bytes,2,opt,name=namespace_id,json=namespaceId,proto3,oneof"`
}

func (*RouteMatcher_RouteId) isRouteMatcher_Matcher() {}

func (*RouteMatcher_NamespaceId) isRouteMatcher_Matcher() {}

type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Ts    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{2}
}

func (x *String) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *String) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type Scalar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Ts    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *Scalar) Reset() {
	*x = Scalar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scalar) ProtoMessage() {}

func (x *Scalar) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scalar.ProtoReflect.Descriptor instead.
func (*Scalar) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{3}
}

func (x *Scalar) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Scalar) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type TimeSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Series []*Scalar         `protobuf:"bytes,2,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *TimeSeries) Reset() {
	*x = TimeSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeries) ProtoMessage() {}

func (x *TimeSeries) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeries.ProtoReflect.Descriptor instead.
func (*TimeSeries) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{4}
}

func (x *TimeSeries) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TimeSeries) GetSeries() []*Scalar {
	if x != nil {
		return x.Series
	}
	return nil
}

type Matrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series []*TimeSeries `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *Matrix) Reset() {
	*x = Matrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Matrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Matrix) ProtoMessage() {}

func (x *Matrix) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Matrix.ProtoReflect.Descriptor instead.
func (*Matrix) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{5}
}

func (x *Matrix) GetSeries() []*TimeSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

type Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Value  *Scalar           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Sample) Reset() {
	*x = Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample.ProtoReflect.Descriptor instead.
func (*Sample) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{6}
}

func (x *Sample) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Sample) GetValue() *Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Samples []*Sample `protobuf:"bytes,1,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{7}
}

func (x *Vector) GetSamples() []*Sample {
	if x != nil {
		return x.Samples
	}
	return nil
}

// request route-specific metric time series
type RouteMetricSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// route to match
	Matcher *RouteMatcher `protobuf:"bytes,1,opt,name=matcher,proto3" json:"matcher,omitempty"`
	// metric to retrieve
	Metric Metric `protobuf:"varint,2,opt,name=metric,proto3,enum=pomerium.dashboard.Metric" json:"metric,omitempty"`
	// time range and sampling step
	Range *Range `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *RouteMetricSeriesRequest) Reset() {
	*x = RouteMetricSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteMetricSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMetricSeriesRequest) ProtoMessage() {}

func (x *RouteMetricSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMetricSeriesRequest.ProtoReflect.Descriptor instead.
func (*RouteMetricSeriesRequest) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{8}
}

func (x *RouteMetricSeriesRequest) GetMatcher() *RouteMatcher {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *RouteMetricSeriesRequest) GetMetric() Metric {
	if x != nil {
		return x.Metric
	}
	return Metric_UNDEFINED_METRIC_DO_NOT_USE
}

func (x *RouteMetricSeriesRequest) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

// request route-specific metric time series histogram
type RouteMetricSeriesHistogramRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// route to match
	Matcher *RouteMatcher `protobuf:"bytes,1,opt,name=matcher,proto3" json:"matcher,omitempty"`
	// metric to retrieve
	Metric Metric `protobuf:"varint,2,opt,name=metric,proto3,enum=pomerium.dashboard.Metric" json:"metric,omitempty"`
	// time range and sampling step
	Range *Range `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	// if data for the metric was precomputed as histogram, the data may be
	// requested within a certain percentile
	Percentile float64 `protobuf:"fixed64,4,opt,name=percentile,proto3" json:"percentile,omitempty"`
}

func (x *RouteMetricSeriesHistogramRequest) Reset() {
	*x = RouteMetricSeriesHistogramRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteMetricSeriesHistogramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMetricSeriesHistogramRequest) ProtoMessage() {}

func (x *RouteMetricSeriesHistogramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMetricSeriesHistogramRequest.ProtoReflect.Descriptor instead.
func (*RouteMetricSeriesHistogramRequest) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{9}
}

func (x *RouteMetricSeriesHistogramRequest) GetMatcher() *RouteMatcher {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *RouteMetricSeriesHistogramRequest) GetMetric() Metric {
	if x != nil {
		return x.Metric
	}
	return Metric_UNDEFINED_METRIC_DO_NOT_USE
}

func (x *RouteMetricSeriesHistogramRequest) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *RouteMetricSeriesHistogramRequest) GetPercentile() float64 {
	if x != nil {
		return x.Percentile
	}
	return 0
}

type ServerMetricSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metric to retrieve
	Metric Metric `protobuf:"varint,2,opt,name=metric,proto3,enum=pomerium.dashboard.Metric" json:"metric,omitempty"`
	// time range and sampling step
	Range *Range `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	// if data for the metric was precomputed as histogram, the data may be
	// requested within a certain percentile
	Percentile float64 `protobuf:"fixed64,4,opt,name=percentile,proto3" json:"percentile,omitempty"`
	// server component and instance ID
	Component  Component `protobuf:"varint,5,opt,name=component,proto3,enum=pomerium.dashboard.Component" json:"component,omitempty"`
	InstanceId string    `protobuf:"bytes,6,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *ServerMetricSeriesRequest) Reset() {
	*x = ServerMetricSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMetricSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMetricSeriesRequest) ProtoMessage() {}

func (x *ServerMetricSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMetricSeriesRequest.ProtoReflect.Descriptor instead.
func (*ServerMetricSeriesRequest) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{10}
}

func (x *ServerMetricSeriesRequest) GetMetric() Metric {
	if x != nil {
		return x.Metric
	}
	return Metric_UNDEFINED_METRIC_DO_NOT_USE
}

func (x *ServerMetricSeriesRequest) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *ServerMetricSeriesRequest) GetPercentile() float64 {
	if x != nil {
		return x.Percentile
	}
	return 0
}

func (x *ServerMetricSeriesRequest) GetComponent() Component {
	if x != nil {
		return x.Component
	}
	return Component_UNKNOWN_DO_NOT_USE
}

func (x *ServerMetricSeriesRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type ServerMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component  Component `protobuf:"varint,1,opt,name=component,proto3,enum=pomerium.dashboard.Component" json:"component,omitempty"`
	InstanceId string    `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// metric to retrieve
	Metric Metric `protobuf:"varint,3,opt,name=metric,proto3,enum=pomerium.dashboard.Metric" json:"metric,omitempty"`
}

func (x *ServerMetricRequest) Reset() {
	*x = ServerMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMetricRequest) ProtoMessage() {}

func (x *ServerMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMetricRequest.ProtoReflect.Descriptor instead.
func (*ServerMetricRequest) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{11}
}

func (x *ServerMetricRequest) GetComponent() Component {
	if x != nil {
		return x.Component
	}
	return Component_UNKNOWN_DO_NOT_USE
}

func (x *ServerMetricRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ServerMetricRequest) GetMetric() Metric {
	if x != nil {
		return x.Metric
	}
	return Metric_UNDEFINED_METRIC_DO_NOT_USE
}

type ConsoleMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric Metric `protobuf:"varint,1,opt,name=metric,proto3,enum=pomerium.dashboard.Metric" json:"metric,omitempty"`
}

func (x *ConsoleMetricRequest) Reset() {
	*x = ConsoleMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsoleMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsoleMetricRequest) ProtoMessage() {}

func (x *ConsoleMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsoleMetricRequest.ProtoReflect.Descriptor instead.
func (*ConsoleMetricRequest) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{12}
}

func (x *ConsoleMetricRequest) GetMetric() Metric {
	if x != nil {
		return x.Metric
	}
	return Metric_UNDEFINED_METRIC_DO_NOT_USE
}

// Requests console metric time series
type ConsoleMetricSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metric to retrieve
	Metric Metric `protobuf:"varint,1,opt,name=metric,proto3,enum=pomerium.dashboard.Metric" json:"metric,omitempty"`
	// Start time
	Start *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	// End time
	End *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ConsoleMetricSeriesRequest) Reset() {
	*x = ConsoleMetricSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsoleMetricSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsoleMetricSeriesRequest) ProtoMessage() {}

func (x *ConsoleMetricSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsoleMetricSeriesRequest.ProtoReflect.Descriptor instead.
func (*ConsoleMetricSeriesRequest) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{13}
}

func (x *ConsoleMetricSeriesRequest) GetMetric() Metric {
	if x != nil {
		return x.Metric
	}
	return Metric_UNDEFINED_METRIC_DO_NOT_USE
}

func (x *ConsoleMetricSeriesRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ConsoleMetricSeriesRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

// LastErrorRequest will fetch last known error for certain error-related metrics
type LastErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric Metric `protobuf:"varint,1,opt,name=metric,proto3,enum=pomerium.dashboard.Metric" json:"metric,omitempty"`
}

func (x *LastErrorRequest) Reset() {
	*x = LastErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastErrorRequest) ProtoMessage() {}

func (x *LastErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastErrorRequest.ProtoReflect.Descriptor instead.
func (*LastErrorRequest) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{14}
}

func (x *LastErrorRequest) GetMetric() Metric {
	if x != nil {
		return x.Metric
	}
	return Metric_UNDEFINED_METRIC_DO_NOT_USE
}

// LastErrorResponse returns last known error for certain error-related metrics
type LastErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LastErrorResponse) Reset() {
	*x = LastErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastErrorResponse) ProtoMessage() {}

func (x *LastErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastErrorResponse.ProtoReflect.Descriptor instead.
func (*LastErrorResponse) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{15}
}

func (x *LastErrorResponse) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *LastErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Used to request a particular metric change within a given period of time
type RouteMetricChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// route to match
	Matcher *RouteMatcher `protobuf:"bytes,1,opt,name=matcher,proto3" json:"matcher,omitempty"`
	// metric to retrieve
	Metric Metric `protobuf:"varint,2,opt,name=metric,proto3,enum=pomerium.dashboard.Metric" json:"metric,omitempty"`
	// Start time
	Start *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	// End time
	End *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *RouteMetricChangeRequest) Reset() {
	*x = RouteMetricChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteMetricChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMetricChangeRequest) ProtoMessage() {}

func (x *RouteMetricChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMetricChangeRequest.ProtoReflect.Descriptor instead.
func (*RouteMetricChangeRequest) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{16}
}

func (x *RouteMetricChangeRequest) GetMatcher() *RouteMatcher {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *RouteMetricChangeRequest) GetMetric() Metric {
	if x != nil {
		return x.Metric
	}
	return Metric_UNDEFINED_METRIC_DO_NOT_USE
}

func (x *RouteMetricChangeRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *RouteMetricChangeRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

// TimeSeries response returns
type TimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// provided for time-sampled values - i.e. requests <per second>
	Rate Rate `protobuf:"varint,1,opt,name=rate,proto3,enum=pomerium.dashboard.Rate" json:"rate,omitempty"`
	// series are (timestamp,value) data points
	Series []*Scalar `protobuf:"bytes,2,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *TimeSeriesResponse) Reset() {
	*x = TimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesResponse) ProtoMessage() {}

func (x *TimeSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*TimeSeriesResponse) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{17}
}

func (x *TimeSeriesResponse) GetRate() Rate {
	if x != nil {
		return x.Rate
	}
	return Rate_NONE
}

func (x *TimeSeriesResponse) GetSeries() []*Scalar {
	if x != nil {
		return x.Series
	}
	return nil
}

// Multiple time series response
type TimeSeriesResponseMulti struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate   Rate          `protobuf:"varint,1,opt,name=rate,proto3,enum=pomerium.dashboard.Rate" json:"rate,omitempty"`
	Series []*TimeSeries `protobuf:"bytes,2,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *TimeSeriesResponseMulti) Reset() {
	*x = TimeSeriesResponseMulti{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSeriesResponseMulti) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesResponseMulti) ProtoMessage() {}

func (x *TimeSeriesResponseMulti) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesResponseMulti.ProtoReflect.Descriptor instead.
func (*TimeSeriesResponseMulti) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{18}
}

func (x *TimeSeriesResponseMulti) GetRate() Rate {
	if x != nil {
		return x.Rate
	}
	return Rate_NONE
}

func (x *TimeSeriesResponseMulti) GetSeries() []*TimeSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

// returns histogram values
type ScalarBuckets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*ScalarBuckets_Bucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *ScalarBuckets) Reset() {
	*x = ScalarBuckets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarBuckets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarBuckets) ProtoMessage() {}

func (x *ScalarBuckets) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarBuckets.ProtoReflect.Descriptor instead.
func (*ScalarBuckets) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{19}
}

func (x *ScalarBuckets) GetBuckets() []*ScalarBuckets_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

// uptime info for all pomerium services for a given period of time
type UptimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	Component  Component              `protobuf:"varint,3,opt,name=component,proto3,enum=pomerium.dashboard.Component" json:"component,omitempty"`
	InstanceId string                 `protobuf:"bytes,4,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *UptimeRequest) Reset() {
	*x = UptimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UptimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptimeRequest) ProtoMessage() {}

func (x *UptimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptimeRequest.ProtoReflect.Descriptor instead.
func (*UptimeRequest) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{20}
}

func (x *UptimeRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *UptimeRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *UptimeRequest) GetComponent() Component {
	if x != nil {
		return x.Component
	}
	return Component_UNKNOWN_DO_NOT_USE
}

func (x *UptimeRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

//
//service uptime is calculated based on liveness probe published by each
//component it is delivered as 2-level hierarchical periods to make it simple
//for the UI consumer it does not provide statistics as data representation
//makes it trivial to calculate depending on the UI requirements
type UptimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intervals []*UptimeResponse_Summary `protobuf:"bytes,1,rep,name=intervals,proto3" json:"intervals,omitempty"`
}

func (x *UptimeResponse) Reset() {
	*x = UptimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UptimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptimeResponse) ProtoMessage() {}

func (x *UptimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptimeResponse.ProtoReflect.Descriptor instead.
func (*UptimeResponse) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{21}
}

func (x *UptimeResponse) GetIntervals() []*UptimeResponse_Summary {
	if x != nil {
		return x.Intervals
	}
	return nil
}

type GetInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *GetInstancesRequest) Reset() {
	*x = GetInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstancesRequest) ProtoMessage() {}

func (x *GetInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstancesRequest.ProtoReflect.Descriptor instead.
func (*GetInstancesRequest) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{22}
}

func (x *GetInstancesRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetInstancesRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type Instances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*Instances_Instance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *Instances) Reset() {
	*x = Instances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instances) ProtoMessage() {}

func (x *Instances) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instances.ProtoReflect.Descriptor instead.
func (*Instances) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{23}
}

func (x *Instances) GetInstances() []*Instances_Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type GetInstanceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component  Component `protobuf:"varint,3,opt,name=component,proto3,enum=pomerium.dashboard.Component" json:"component,omitempty"`
	InstanceId string    `protobuf:"bytes,4,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *GetInstanceInfoRequest) Reset() {
	*x = GetInstanceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstanceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceInfoRequest) ProtoMessage() {}

func (x *GetInstanceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceInfoRequest) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{24}
}

func (x *GetInstanceInfoRequest) GetComponent() Component {
	if x != nil {
		return x.Component
	}
	return Component_UNKNOWN_DO_NOT_USE
}

func (x *GetInstanceInfoRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type GetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{25}
}

type GetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets []*GetStatusResponse_Target `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	// Types that are assignable to Status:
	//	*GetStatusResponse_Ok
	//	*GetStatusResponse_LastError
	Status isGetStatusResponse_Status `protobuf_oneof:"status"`
}

func (x *GetStatusResponse) Reset() {
	*x = GetStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse) ProtoMessage() {}

func (x *GetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{26}
}

func (x *GetStatusResponse) GetTargets() []*GetStatusResponse_Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (m *GetStatusResponse) GetStatus() isGetStatusResponse_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *GetStatusResponse) GetOk() bool {
	if x, ok := x.GetStatus().(*GetStatusResponse_Ok); ok {
		return x.Ok
	}
	return false
}

func (x *GetStatusResponse) GetLastError() string {
	if x, ok := x.GetStatus().(*GetStatusResponse_LastError); ok {
		return x.LastError
	}
	return ""
}

type isGetStatusResponse_Status interface {
	isGetStatusResponse_Status()
}

type GetStatusResponse_Ok struct {
	Ok bool `protobuf:"varint,2,opt,name=ok,proto3,oneof"`
}

type GetStatusResponse_LastError struct {
	LastError string `protobuf:"bytes,3,opt,name=last_error,json=lastError,proto3,oneof"`
}

func (*GetStatusResponse_Ok) isGetStatusResponse_Status() {}

func (*GetStatusResponse_LastError) isGetStatusResponse_Status() {}

type UsageReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UsageReportRequest) Reset() {
	*x = UsageReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageReportRequest) ProtoMessage() {}

func (x *UsageReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageReportRequest.ProtoReflect.Descriptor instead.
func (*UsageReportRequest) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{27}
}

type UsageReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report []byte `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *UsageReportResponse) Reset() {
	*x = UsageReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageReportResponse) ProtoMessage() {}

func (x *UsageReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageReportResponse.ProtoReflect.Descriptor instead.
func (*UsageReportResponse) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{28}
}

func (x *UsageReportResponse) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

type Labels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Labels) Reset() {
	*x = Labels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Labels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Labels) ProtoMessage() {}

func (x *Labels) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Labels.ProtoReflect.Descriptor instead.
func (*Labels) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{29}
}

func (x *Labels) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ScalarBuckets_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bucket identifier
	LessOrEqualThan float64 `protobuf:"fixed64,1,opt,name=less_or_equal_than,json=lessOrEqualThan,proto3" json:"less_or_equal_than,omitempty"`
	// occurences for the given bucket
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ScalarBuckets_Bucket) Reset() {
	*x = ScalarBuckets_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarBuckets_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarBuckets_Bucket) ProtoMessage() {}

func (x *ScalarBuckets_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarBuckets_Bucket.ProtoReflect.Descriptor instead.
func (*ScalarBuckets_Bucket) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{19, 0}
}

func (x *ScalarBuckets_Bucket) GetLessOrEqualThan() float64 {
	if x != nil {
		return x.LessOrEqualThan
	}
	return 0
}

func (x *ScalarBuckets_Bucket) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// summary provides a higher level information re health of the component
type UptimeResponse_Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	// aggregate status of the system
	Status UptimeResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=pomerium.dashboard.UptimeResponse_Status" json:"status,omitempty"`
}

func (x *UptimeResponse_Summary) Reset() {
	*x = UptimeResponse_Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UptimeResponse_Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptimeResponse_Summary) ProtoMessage() {}

func (x *UptimeResponse_Summary) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptimeResponse_Summary.ProtoReflect.Descriptor instead.
func (*UptimeResponse_Summary) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{21, 0}
}

func (x *UptimeResponse_Summary) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *UptimeResponse_Summary) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *UptimeResponse_Summary) GetStatus() UptimeResponse_Status {
	if x != nil {
		return x.Status
	}
	return UptimeResponse_UNDEFINED_STATUS_DO_NOT_USE
}

type Instances_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component Component `protobuf:"varint,1,opt,name=component,proto3,enum=pomerium.dashboard.Component" json:"component,omitempty"`
	// ID that should be used in requests for metrics
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// human readable instance name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Instances_Instance) Reset() {
	*x = Instances_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instances_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instances_Instance) ProtoMessage() {}

func (x *Instances_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instances_Instance.ProtoReflect.Descriptor instead.
func (*Instances_Instance) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{23, 0}
}

func (x *Instances_Instance) GetComponent() Component {
	if x != nil {
		return x.Component
	}
	return Component_UNKNOWN_DO_NOT_USE
}

func (x *Instances_Instance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Instances_Instance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetStatusResponse_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScrapeUrl  string                          `protobuf:"bytes,1,opt,name=scrape_url,json=scrapeUrl,proto3" json:"scrape_url,omitempty"`
	GlobalUrl  string                          `protobuf:"bytes,2,opt,name=global_url,json=globalUrl,proto3" json:"global_url,omitempty"`
	LastError  string                          `protobuf:"bytes,3,opt,name=last_error,json=lastError,proto3" json:"last_error,omitempty"`
	LastScrape *timestamppb.Timestamp          `protobuf:"bytes,4,opt,name=last_scrape,json=lastScrape,proto3" json:"last_scrape,omitempty"`
	Health     GetStatusResponse_Target_Health `protobuf:"varint,5,opt,name=health,proto3,enum=pomerium.dashboard.GetStatusResponse_Target_Health" json:"health,omitempty"`
}

func (x *GetStatusResponse_Target) Reset() {
	*x = GetStatusResponse_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tsdb_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusResponse_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse_Target) ProtoMessage() {}

func (x *GetStatusResponse_Target) ProtoReflect() protoreflect.Message {
	mi := &file_tsdb_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse_Target.ProtoReflect.Descriptor instead.
func (*GetStatusResponse_Target) Descriptor() ([]byte, []int) {
	return file_tsdb_proto_rawDescGZIP(), []int{26, 0}
}

func (x *GetStatusResponse_Target) GetScrapeUrl() string {
	if x != nil {
		return x.ScrapeUrl
	}
	return ""
}

func (x *GetStatusResponse_Target) GetGlobalUrl() string {
	if x != nil {
		return x.GlobalUrl
	}
	return ""
}

func (x *GetStatusResponse_Target) GetLastError() string {
	if x != nil {
		return x.LastError
	}
	return ""
}

func (x *GetStatusResponse_Target) GetLastScrape() *timestamppb.Timestamp {
	if x != nil {
		return x.LastScrape
	}
	return nil
}

func (x *GetStatusResponse_Target) GetHealth() GetStatusResponse_Target_Health {
	if x != nil {
		return x.Health
	}
	return GetStatusResponse_Target_TARGET_HEALTH_UNKNOWN
}

var File_tsdb_proto protoreflect.FileDescriptor

var file_tsdb_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x73, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x70, 0x6f,
	0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x05, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x36, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x22, 0x6d, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x06,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69,
	0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6f,
	0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x06, 0x4d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0xb5, 0x01, 0x0a,
	0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69,
	0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75,
	0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a, 0x06, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x34,
	0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x18, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69,
	0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75,
	0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x21, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x6d, 0x65,
	0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82,
	0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x39,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x17, 0xfa,
	0x42, 0x14, 0x12, 0x12, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x29, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69,
	0x6c, 0x65, 0x22, 0xc2, 0x02, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x39, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x17, 0xfa, 0x42, 0x14, 0x12, 0x12, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x29,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69,
	0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01,
	0x20, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x22, 0x56, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6d,
	0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01,
	0x20, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0xd0, 0x01, 0x0a, 0x1a, 0x43,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6d, 0x65,
	0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20,
	0x00, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x52, 0x0a,
	0x10, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x22, 0x59, 0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x92, 0x02, 0x0a,
	0x18, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x6d,
	0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x3a, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x22, 0x76, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x7f, 0x0a, 0x17, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x0d, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x07,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x1a, 0x4b, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x61, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6c, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf6, 0x01,
	0x0a, 0x0d, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75,
	0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20,
	0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xd5, 0x02, 0x0a, 0x0e, 0x55, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x1a, 0xac, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x22, 0x89,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x09, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6f,
	0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x6b,
	0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x6d, 0x65,
	0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04,
	0x10, 0x01, 0x20, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdd, 0x03,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x02, 0x6f,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x1f, 0x0a,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xc2,
	0x02, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x72,
	0x61, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x22, 0x51, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f,
	0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x14, 0x0a,
	0x12, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x2d, 0x0a, 0x13, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3e, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x20, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45,
	0x52, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x01, 0x2a, 0xbb, 0x09, 0x0a, 0x06, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x53, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x53, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x53, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x4f,
	0x4b, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x55, 0x54, 0x48, 0x5a, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55,
	0x54, 0x48, 0x5a, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59,
	0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50,
	0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x1f, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44,
	0x45, 0x44, 0x10, 0x20, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x48,
	0x49, 0x50, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x21, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x58,
	0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x28, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x58, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x29, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f,
	0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x2a, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x33, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x50, 0x55, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x34, 0x12, 0x1e, 0x0a, 0x1a,
	0x49, 0x44, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x3c, 0x12, 0x2b, 0x0a, 0x27,
	0x49, 0x44, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x64, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x44, 0x50,
	0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45,
	0x53, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x10, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x44, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x66, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x44, 0x50, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x67, 0x12, 0x31, 0x0a, 0x2d, 0x49, 0x44, 0x50, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x68, 0x12, 0x2f, 0x0a, 0x2b, 0x49,
	0x44, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x69, 0x12, 0x25, 0x0a, 0x21,
	0x49, 0x44, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x6a, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x44, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45,
	0x53, 0x48, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x6b, 0x12, 0x2e, 0x0a, 0x2a,
	0x49, 0x44, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x6c, 0x12, 0x2c, 0x0a, 0x28,
	0x49, 0x44, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x6d, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x44,
	0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x6e, 0x12, 0x24,
	0x0a, 0x20, 0x49, 0x44, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x6f, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x46, 0x12, 0x0e,
	0x0a, 0x0a, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x47, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x53, 0x55,
	0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x48, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x53, 0x55, 0x4d, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0x49, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x4a, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x4b,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x4f,
	0x4c, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x4c, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x52, 0x4f, 0x4d, 0x45, 0x54, 0x48, 0x45, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x50, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4f,
	0x4e, 0x54, 0x48, 0x4c, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x53, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x5a, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x5b, 0x2a, 0x9d, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x5f, 0x49,
	0x4e, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x58, 0x59,
	0x5f, 0x45, 0x4e, 0x56, 0x4f, 0x59, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x4d,
	0x45, 0x54, 0x48, 0x45, 0x55, 0x53, 0x10, 0x08, 0x32, 0xd6, 0x09, 0x0a, 0x0c, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x42, 0x12, 0x60, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x2c, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x70, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x2e, 0x70,
	0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x6d,
	0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x6c, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x35, 0x2e, 0x70,
	0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x2c, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72,
	0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75,
	0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x12, 0x52, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69,
	0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x6e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72,
	0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69,
	0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x27, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x6f,
	0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x6f, 0x6d,
	0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x24, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69,
	0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4c, 0x61, 0x73,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x26, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72,
	0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2f, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75,
	0x6d, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tsdb_proto_rawDescOnce sync.Once
	file_tsdb_proto_rawDescData = file_tsdb_proto_rawDesc
)

func file_tsdb_proto_rawDescGZIP() []byte {
	file_tsdb_proto_rawDescOnce.Do(func() {
		file_tsdb_proto_rawDescData = protoimpl.X.CompressGZIP(file_tsdb_proto_rawDescData)
	})
	return file_tsdb_proto_rawDescData
}

var file_tsdb_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_tsdb_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_tsdb_proto_goTypes = []interface{}{
	(Rate)(0),                                 // 0: pomerium.dashboard.Rate
	(Metric)(0),                               // 1: pomerium.dashboard.Metric
	(Component)(0),                            // 2: pomerium.dashboard.Component
	(UptimeResponse_Status)(0),                // 3: pomerium.dashboard.UptimeResponse.Status
	(GetStatusResponse_Target_Health)(0),      // 4: pomerium.dashboard.GetStatusResponse.Target.Health
	(*Range)(nil),                             // 5: pomerium.dashboard.Range
	(*RouteMatcher)(nil),                      // 6: pomerium.dashboard.RouteMatcher
	(*String)(nil),                            // 7: pomerium.dashboard.String
	(*Scalar)(nil),                            // 8: pomerium.dashboard.Scalar
	(*TimeSeries)(nil),                        // 9: pomerium.dashboard.TimeSeries
	(*Matrix)(nil),                            // 10: pomerium.dashboard.Matrix
	(*Sample)(nil),                            // 11: pomerium.dashboard.Sample
	(*Vector)(nil),                            // 12: pomerium.dashboard.Vector
	(*RouteMetricSeriesRequest)(nil),          // 13: pomerium.dashboard.RouteMetricSeriesRequest
	(*RouteMetricSeriesHistogramRequest)(nil), // 14: pomerium.dashboard.RouteMetricSeriesHistogramRequest
	(*ServerMetricSeriesRequest)(nil),         // 15: pomerium.dashboard.ServerMetricSeriesRequest
	(*ServerMetricRequest)(nil),               // 16: pomerium.dashboard.ServerMetricRequest
	(*ConsoleMetricRequest)(nil),              // 17: pomerium.dashboard.ConsoleMetricRequest
	(*ConsoleMetricSeriesRequest)(nil),        // 18: pomerium.dashboard.ConsoleMetricSeriesRequest
	(*LastErrorRequest)(nil),                  // 19: pomerium.dashboard.LastErrorRequest
	(*LastErrorResponse)(nil),                 // 20: pomerium.dashboard.LastErrorResponse
	(*RouteMetricChangeRequest)(nil),          // 21: pomerium.dashboard.RouteMetricChangeRequest
	(*TimeSeriesResponse)(nil),                // 22: pomerium.dashboard.TimeSeriesResponse
	(*TimeSeriesResponseMulti)(nil),           // 23: pomerium.dashboard.TimeSeriesResponseMulti
	(*ScalarBuckets)(nil),                     // 24: pomerium.dashboard.ScalarBuckets
	(*UptimeRequest)(nil),                     // 25: pomerium.dashboard.UptimeRequest
	(*UptimeResponse)(nil),                    // 26: pomerium.dashboard.UptimeResponse
	(*GetInstancesRequest)(nil),               // 27: pomerium.dashboard.GetInstancesRequest
	(*Instances)(nil),                         // 28: pomerium.dashboard.Instances
	(*GetInstanceInfoRequest)(nil),            // 29: pomerium.dashboard.GetInstanceInfoRequest
	(*GetStatusRequest)(nil),                  // 30: pomerium.dashboard.GetStatusRequest
	(*GetStatusResponse)(nil),                 // 31: pomerium.dashboard.GetStatusResponse
	(*UsageReportRequest)(nil),                // 32: pomerium.dashboard.UsageReportRequest
	(*UsageReportResponse)(nil),               // 33: pomerium.dashboard.UsageReportResponse
	(*Labels)(nil),                            // 34: pomerium.dashboard.Labels
	nil,                                       // 35: pomerium.dashboard.TimeSeries.LabelsEntry
	nil,                                       // 36: pomerium.dashboard.Sample.LabelsEntry
	(*ScalarBuckets_Bucket)(nil),              // 37: pomerium.dashboard.ScalarBuckets.Bucket
	(*UptimeResponse_Summary)(nil),            // 38: pomerium.dashboard.UptimeResponse.Summary
	(*Instances_Instance)(nil),                // 39: pomerium.dashboard.Instances.Instance
	(*GetStatusResponse_Target)(nil),          // 40: pomerium.dashboard.GetStatusResponse.Target
	nil,                                       // 41: pomerium.dashboard.Labels.LabelsEntry
	(*timestamppb.Timestamp)(nil),             // 42: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),               // 43: google.protobuf.Duration
}
var file_tsdb_proto_depIdxs = []int32{
	42, // 0: pomerium.dashboard.Range.start:type_name -> google.protobuf.Timestamp
	42, // 1: pomerium.dashboard.Range.end:type_name -> google.protobuf.Timestamp
	43, // 2: pomerium.dashboard.Range.step:type_name -> google.protobuf.Duration
	42, // 3: pomerium.dashboard.String.ts:type_name -> google.protobuf.Timestamp
	42, // 4: pomerium.dashboard.Scalar.ts:type_name -> google.protobuf.Timestamp
	35, // 5: pomerium.dashboard.TimeSeries.labels:type_name -> pomerium.dashboard.TimeSeries.LabelsEntry
	8,  // 6: pomerium.dashboard.TimeSeries.series:type_name -> pomerium.dashboard.Scalar
	9,  // 7: pomerium.dashboard.Matrix.series:type_name -> pomerium.dashboard.TimeSeries
	36, // 8: pomerium.dashboard.Sample.labels:type_name -> pomerium.dashboard.Sample.LabelsEntry
	8,  // 9: pomerium.dashboard.Sample.value:type_name -> pomerium.dashboard.Scalar
	11, // 10: pomerium.dashboard.Vector.samples:type_name -> pomerium.dashboard.Sample
	6,  // 11: pomerium.dashboard.RouteMetricSeriesRequest.matcher:type_name -> pomerium.dashboard.RouteMatcher
	1,  // 12: pomerium.dashboard.RouteMetricSeriesRequest.metric:type_name -> pomerium.dashboard.Metric
	5,  // 13: pomerium.dashboard.RouteMetricSeriesRequest.range:type_name -> pomerium.dashboard.Range
	6,  // 14: pomerium.dashboard.RouteMetricSeriesHistogramRequest.matcher:type_name -> pomerium.dashboard.RouteMatcher
	1,  // 15: pomerium.dashboard.RouteMetricSeriesHistogramRequest.metric:type_name -> pomerium.dashboard.Metric
	5,  // 16: pomerium.dashboard.RouteMetricSeriesHistogramRequest.range:type_name -> pomerium.dashboard.Range
	1,  // 17: pomerium.dashboard.ServerMetricSeriesRequest.metric:type_name -> pomerium.dashboard.Metric
	5,  // 18: pomerium.dashboard.ServerMetricSeriesRequest.range:type_name -> pomerium.dashboard.Range
	2,  // 19: pomerium.dashboard.ServerMetricSeriesRequest.component:type_name -> pomerium.dashboard.Component
	2,  // 20: pomerium.dashboard.ServerMetricRequest.component:type_name -> pomerium.dashboard.Component
	1,  // 21: pomerium.dashboard.ServerMetricRequest.metric:type_name -> pomerium.dashboard.Metric
	1,  // 22: pomerium.dashboard.ConsoleMetricRequest.metric:type_name -> pomerium.dashboard.Metric
	1,  // 23: pomerium.dashboard.ConsoleMetricSeriesRequest.metric:type_name -> pomerium.dashboard.Metric
	42, // 24: pomerium.dashboard.ConsoleMetricSeriesRequest.start:type_name -> google.protobuf.Timestamp
	42, // 25: pomerium.dashboard.ConsoleMetricSeriesRequest.end:type_name -> google.protobuf.Timestamp
	1,  // 26: pomerium.dashboard.LastErrorRequest.metric:type_name -> pomerium.dashboard.Metric
	42, // 27: pomerium.dashboard.LastErrorResponse.ts:type_name -> google.protobuf.Timestamp
	6,  // 28: pomerium.dashboard.RouteMetricChangeRequest.matcher:type_name -> pomerium.dashboard.RouteMatcher
	1,  // 29: pomerium.dashboard.RouteMetricChangeRequest.metric:type_name -> pomerium.dashboard.Metric
	42, // 30: pomerium.dashboard.RouteMetricChangeRequest.start:type_name -> google.protobuf.Timestamp
	42, // 31: pomerium.dashboard.RouteMetricChangeRequest.end:type_name -> google.protobuf.Timestamp
	0,  // 32: pomerium.dashboard.TimeSeriesResponse.rate:type_name -> pomerium.dashboard.Rate
	8,  // 33: pomerium.dashboard.TimeSeriesResponse.series:type_name -> pomerium.dashboard.Scalar
	0,  // 34: pomerium.dashboard.TimeSeriesResponseMulti.rate:type_name -> pomerium.dashboard.Rate
	9,  // 35: pomerium.dashboard.TimeSeriesResponseMulti.series:type_name -> pomerium.dashboard.TimeSeries
	37, // 36: pomerium.dashboard.ScalarBuckets.buckets:type_name -> pomerium.dashboard.ScalarBuckets.Bucket
	42, // 37: pomerium.dashboard.UptimeRequest.start:type_name -> google.protobuf.Timestamp
	42, // 38: pomerium.dashboard.UptimeRequest.end:type_name -> google.protobuf.Timestamp
	2,  // 39: pomerium.dashboard.UptimeRequest.component:type_name -> pomerium.dashboard.Component
	38, // 40: pomerium.dashboard.UptimeResponse.intervals:type_name -> pomerium.dashboard.UptimeResponse.Summary
	42, // 41: pomerium.dashboard.GetInstancesRequest.start:type_name -> google.protobuf.Timestamp
	42, // 42: pomerium.dashboard.GetInstancesRequest.end:type_name -> google.protobuf.Timestamp
	39, // 43: pomerium.dashboard.Instances.instances:type_name -> pomerium.dashboard.Instances.Instance
	2,  // 44: pomerium.dashboard.GetInstanceInfoRequest.component:type_name -> pomerium.dashboard.Component
	40, // 45: pomerium.dashboard.GetStatusResponse.targets:type_name -> pomerium.dashboard.GetStatusResponse.Target
	41, // 46: pomerium.dashboard.Labels.labels:type_name -> pomerium.dashboard.Labels.LabelsEntry
	42, // 47: pomerium.dashboard.UptimeResponse.Summary.start:type_name -> google.protobuf.Timestamp
	42, // 48: pomerium.dashboard.UptimeResponse.Summary.end:type_name -> google.protobuf.Timestamp
	3,  // 49: pomerium.dashboard.UptimeResponse.Summary.status:type_name -> pomerium.dashboard.UptimeResponse.Status
	2,  // 50: pomerium.dashboard.Instances.Instance.component:type_name -> pomerium.dashboard.Component
	42, // 51: pomerium.dashboard.GetStatusResponse.Target.last_scrape:type_name -> google.protobuf.Timestamp
	4,  // 52: pomerium.dashboard.GetStatusResponse.Target.health:type_name -> pomerium.dashboard.GetStatusResponse.Target.Health
	21, // 53: pomerium.dashboard.TimeSeriesDB.GetRouteMetricChange:input_type -> pomerium.dashboard.RouteMetricChangeRequest
	21, // 54: pomerium.dashboard.TimeSeriesDB.GetRouteMetricChangeHistogram:input_type -> pomerium.dashboard.RouteMetricChangeRequest
	13, // 55: pomerium.dashboard.TimeSeriesDB.GetRouteMetricSeries:input_type -> pomerium.dashboard.RouteMetricSeriesRequest
	14, // 56: pomerium.dashboard.TimeSeriesDB.GetRouteMetricSeriesHistogram:input_type -> pomerium.dashboard.RouteMetricSeriesHistogramRequest
	13, // 57: pomerium.dashboard.TimeSeriesDB.GetRouteMetricSeriesMulti:input_type -> pomerium.dashboard.RouteMetricSeriesRequest
	25, // 58: pomerium.dashboard.TimeSeriesDB.GetUptime:input_type -> pomerium.dashboard.UptimeRequest
	27, // 59: pomerium.dashboard.TimeSeriesDB.GetInstances:input_type -> pomerium.dashboard.GetInstancesRequest
	15, // 60: pomerium.dashboard.TimeSeriesDB.GetServerMetricSeries:input_type -> pomerium.dashboard.ServerMetricSeriesRequest
	16, // 61: pomerium.dashboard.TimeSeriesDB.GetServerMetric:input_type -> pomerium.dashboard.ServerMetricRequest
	30, // 62: pomerium.dashboard.TimeSeriesDB.GetStatus:input_type -> pomerium.dashboard.GetStatusRequest
	19, // 63: pomerium.dashboard.TimeSeriesDB.GetLastError:input_type -> pomerium.dashboard.LastErrorRequest
	32, // 64: pomerium.dashboard.TimeSeriesDB.GetUsageReport:input_type -> pomerium.dashboard.UsageReportRequest
	8,  // 65: pomerium.dashboard.TimeSeriesDB.GetRouteMetricChange:output_type -> pomerium.dashboard.Scalar
	24, // 66: pomerium.dashboard.TimeSeriesDB.GetRouteMetricChangeHistogram:output_type -> pomerium.dashboard.ScalarBuckets
	22, // 67: pomerium.dashboard.TimeSeriesDB.GetRouteMetricSeries:output_type -> pomerium.dashboard.TimeSeriesResponse
	22, // 68: pomerium.dashboard.TimeSeriesDB.GetRouteMetricSeriesHistogram:output_type -> pomerium.dashboard.TimeSeriesResponse
	23, // 69: pomerium.dashboard.TimeSeriesDB.GetRouteMetricSeriesMulti:output_type -> pomerium.dashboard.TimeSeriesResponseMulti
	26, // 70: pomerium.dashboard.TimeSeriesDB.GetUptime:output_type -> pomerium.dashboard.UptimeResponse
	28, // 71: pomerium.dashboard.TimeSeriesDB.GetInstances:output_type -> pomerium.dashboard.Instances
	22, // 72: pomerium.dashboard.TimeSeriesDB.GetServerMetricSeries:output_type -> pomerium.dashboard.TimeSeriesResponse
	11, // 73: pomerium.dashboard.TimeSeriesDB.GetServerMetric:output_type -> pomerium.dashboard.Sample
	31, // 74: pomerium.dashboard.TimeSeriesDB.GetStatus:output_type -> pomerium.dashboard.GetStatusResponse
	20, // 75: pomerium.dashboard.TimeSeriesDB.GetLastError:output_type -> pomerium.dashboard.LastErrorResponse
	33, // 76: pomerium.dashboard.TimeSeriesDB.GetUsageReport:output_type -> pomerium.dashboard.UsageReportResponse
	65, // [65:77] is the sub-list for method output_type
	53, // [53:65] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_tsdb_proto_init() }
func file_tsdb_proto_init() {
	if File_tsdb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tsdb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scalar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Matrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteMetricSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteMetricSeriesHistogramRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMetricSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsoleMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsoleMetricSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteMetricChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeriesResponseMulti); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarBuckets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UptimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UptimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstanceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Labels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarBuckets_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UptimeResponse_Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instances_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tsdb_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusResponse_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tsdb_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RouteMatcher_RouteId)(nil),
		(*RouteMatcher_NamespaceId)(nil),
	}
	file_tsdb_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*GetStatusResponse_Ok)(nil),
		(*GetStatusResponse_LastError)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tsdb_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tsdb_proto_goTypes,
		DependencyIndexes: file_tsdb_proto_depIdxs,
		EnumInfos:         file_tsdb_proto_enumTypes,
		MessageInfos:      file_tsdb_proto_msgTypes,
	}.Build()
	File_tsdb_proto = out.File
	file_tsdb_proto_rawDesc = nil
	file_tsdb_proto_goTypes = nil
	file_tsdb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TimeSeriesDBClient is the client API for TimeSeriesDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeSeriesDBClient interface {
	// returns metric change for a period of time
	GetRouteMetricChange(ctx context.Context, in *RouteMetricChangeRequest, opts ...grpc.CallOption) (*Scalar, error)
	// returns buckets of values for a given metric
	GetRouteMetricChangeHistogram(ctx context.Context, in *RouteMetricChangeRequest, opts ...grpc.CallOption) (*ScalarBuckets, error)
	// returns metric change as time series
	GetRouteMetricSeries(ctx context.Context, in *RouteMetricSeriesRequest, opts ...grpc.CallOption) (*TimeSeriesResponse, error)
	// returns metric change as time series
	GetRouteMetricSeriesHistogram(ctx context.Context, in *RouteMetricSeriesHistogramRequest, opts ...grpc.CallOption) (*TimeSeriesResponse, error)
	// returns multiple annotated time series
	GetRouteMetricSeriesMulti(ctx context.Context, in *RouteMetricSeriesRequest, opts ...grpc.CallOption) (*TimeSeriesResponseMulti, error)
	// returns service uptime statistics
	GetUptime(ctx context.Context, in *UptimeRequest, opts ...grpc.CallOption) (*UptimeResponse, error)
	// returns list of system services with metrics
	GetInstances(ctx context.Context, in *GetInstancesRequest, opts ...grpc.CallOption) (*Instances, error)
	// returns server queries
	GetServerMetricSeries(ctx context.Context, in *ServerMetricSeriesRequest, opts ...grpc.CallOption) (*TimeSeriesResponse, error)
	// returns current metric value
	GetServerMetric(ctx context.Context, in *ServerMetricRequest, opts ...grpc.CallOption) (*Sample, error)
	// returns current status of scraping targets
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// returns last known error for a metric, if available
	GetLastError(ctx context.Context, in *LastErrorRequest, opts ...grpc.CallOption) (*LastErrorResponse, error)
	// returns usage report
	GetUsageReport(ctx context.Context, in *UsageReportRequest, opts ...grpc.CallOption) (*UsageReportResponse, error)
}

type timeSeriesDBClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeSeriesDBClient(cc grpc.ClientConnInterface) TimeSeriesDBClient {
	return &timeSeriesDBClient{cc}
}

func (c *timeSeriesDBClient) GetRouteMetricChange(ctx context.Context, in *RouteMetricChangeRequest, opts ...grpc.CallOption) (*Scalar, error) {
	out := new(Scalar)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.TimeSeriesDB/GetRouteMetricChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSeriesDBClient) GetRouteMetricChangeHistogram(ctx context.Context, in *RouteMetricChangeRequest, opts ...grpc.CallOption) (*ScalarBuckets, error) {
	out := new(ScalarBuckets)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.TimeSeriesDB/GetRouteMetricChangeHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSeriesDBClient) GetRouteMetricSeries(ctx context.Context, in *RouteMetricSeriesRequest, opts ...grpc.CallOption) (*TimeSeriesResponse, error) {
	out := new(TimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.TimeSeriesDB/GetRouteMetricSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSeriesDBClient) GetRouteMetricSeriesHistogram(ctx context.Context, in *RouteMetricSeriesHistogramRequest, opts ...grpc.CallOption) (*TimeSeriesResponse, error) {
	out := new(TimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.TimeSeriesDB/GetRouteMetricSeriesHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSeriesDBClient) GetRouteMetricSeriesMulti(ctx context.Context, in *RouteMetricSeriesRequest, opts ...grpc.CallOption) (*TimeSeriesResponseMulti, error) {
	out := new(TimeSeriesResponseMulti)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.TimeSeriesDB/GetRouteMetricSeriesMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSeriesDBClient) GetUptime(ctx context.Context, in *UptimeRequest, opts ...grpc.CallOption) (*UptimeResponse, error) {
	out := new(UptimeResponse)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.TimeSeriesDB/GetUptime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSeriesDBClient) GetInstances(ctx context.Context, in *GetInstancesRequest, opts ...grpc.CallOption) (*Instances, error) {
	out := new(Instances)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.TimeSeriesDB/GetInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSeriesDBClient) GetServerMetricSeries(ctx context.Context, in *ServerMetricSeriesRequest, opts ...grpc.CallOption) (*TimeSeriesResponse, error) {
	out := new(TimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.TimeSeriesDB/GetServerMetricSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSeriesDBClient) GetServerMetric(ctx context.Context, in *ServerMetricRequest, opts ...grpc.CallOption) (*Sample, error) {
	out := new(Sample)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.TimeSeriesDB/GetServerMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSeriesDBClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.TimeSeriesDB/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSeriesDBClient) GetLastError(ctx context.Context, in *LastErrorRequest, opts ...grpc.CallOption) (*LastErrorResponse, error) {
	out := new(LastErrorResponse)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.TimeSeriesDB/GetLastError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeSeriesDBClient) GetUsageReport(ctx context.Context, in *UsageReportRequest, opts ...grpc.CallOption) (*UsageReportResponse, error) {
	out := new(UsageReportResponse)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.TimeSeriesDB/GetUsageReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeSeriesDBServer is the server API for TimeSeriesDB service.
type TimeSeriesDBServer interface {
	// returns metric change for a period of time
	GetRouteMetricChange(context.Context, *RouteMetricChangeRequest) (*Scalar, error)
	// returns buckets of values for a given metric
	GetRouteMetricChangeHistogram(context.Context, *RouteMetricChangeRequest) (*ScalarBuckets, error)
	// returns metric change as time series
	GetRouteMetricSeries(context.Context, *RouteMetricSeriesRequest) (*TimeSeriesResponse, error)
	// returns metric change as time series
	GetRouteMetricSeriesHistogram(context.Context, *RouteMetricSeriesHistogramRequest) (*TimeSeriesResponse, error)
	// returns multiple annotated time series
	GetRouteMetricSeriesMulti(context.Context, *RouteMetricSeriesRequest) (*TimeSeriesResponseMulti, error)
	// returns service uptime statistics
	GetUptime(context.Context, *UptimeRequest) (*UptimeResponse, error)
	// returns list of system services with metrics
	GetInstances(context.Context, *GetInstancesRequest) (*Instances, error)
	// returns server queries
	GetServerMetricSeries(context.Context, *ServerMetricSeriesRequest) (*TimeSeriesResponse, error)
	// returns current metric value
	GetServerMetric(context.Context, *ServerMetricRequest) (*Sample, error)
	// returns current status of scraping targets
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// returns last known error for a metric, if available
	GetLastError(context.Context, *LastErrorRequest) (*LastErrorResponse, error)
	// returns usage report
	GetUsageReport(context.Context, *UsageReportRequest) (*UsageReportResponse, error)
}

// UnimplementedTimeSeriesDBServer can be embedded to have forward compatible implementations.
type UnimplementedTimeSeriesDBServer struct {
}

func (*UnimplementedTimeSeriesDBServer) GetRouteMetricChange(context.Context, *RouteMetricChangeRequest) (*Scalar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteMetricChange not implemented")
}
func (*UnimplementedTimeSeriesDBServer) GetRouteMetricChangeHistogram(context.Context, *RouteMetricChangeRequest) (*ScalarBuckets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteMetricChangeHistogram not implemented")
}
func (*UnimplementedTimeSeriesDBServer) GetRouteMetricSeries(context.Context, *RouteMetricSeriesRequest) (*TimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteMetricSeries not implemented")
}
func (*UnimplementedTimeSeriesDBServer) GetRouteMetricSeriesHistogram(context.Context, *RouteMetricSeriesHistogramRequest) (*TimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteMetricSeriesHistogram not implemented")
}
func (*UnimplementedTimeSeriesDBServer) GetRouteMetricSeriesMulti(context.Context, *RouteMetricSeriesRequest) (*TimeSeriesResponseMulti, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteMetricSeriesMulti not implemented")
}
func (*UnimplementedTimeSeriesDBServer) GetUptime(context.Context, *UptimeRequest) (*UptimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUptime not implemented")
}
func (*UnimplementedTimeSeriesDBServer) GetInstances(context.Context, *GetInstancesRequest) (*Instances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstances not implemented")
}
func (*UnimplementedTimeSeriesDBServer) GetServerMetricSeries(context.Context, *ServerMetricSeriesRequest) (*TimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMetricSeries not implemented")
}
func (*UnimplementedTimeSeriesDBServer) GetServerMetric(context.Context, *ServerMetricRequest) (*Sample, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMetric not implemented")
}
func (*UnimplementedTimeSeriesDBServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedTimeSeriesDBServer) GetLastError(context.Context, *LastErrorRequest) (*LastErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastError not implemented")
}
func (*UnimplementedTimeSeriesDBServer) GetUsageReport(context.Context, *UsageReportRequest) (*UsageReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsageReport not implemented")
}

func RegisterTimeSeriesDBServer(s *grpc.Server, srv TimeSeriesDBServer) {
	s.RegisterService(&_TimeSeriesDB_serviceDesc, srv)
}

func _TimeSeriesDB_GetRouteMetricChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteMetricChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSeriesDBServer).GetRouteMetricChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.TimeSeriesDB/GetRouteMetricChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSeriesDBServer).GetRouteMetricChange(ctx, req.(*RouteMetricChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSeriesDB_GetRouteMetricChangeHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteMetricChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSeriesDBServer).GetRouteMetricChangeHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.TimeSeriesDB/GetRouteMetricChangeHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSeriesDBServer).GetRouteMetricChangeHistogram(ctx, req.(*RouteMetricChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSeriesDB_GetRouteMetricSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteMetricSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSeriesDBServer).GetRouteMetricSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.TimeSeriesDB/GetRouteMetricSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSeriesDBServer).GetRouteMetricSeries(ctx, req.(*RouteMetricSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSeriesDB_GetRouteMetricSeriesHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteMetricSeriesHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSeriesDBServer).GetRouteMetricSeriesHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.TimeSeriesDB/GetRouteMetricSeriesHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSeriesDBServer).GetRouteMetricSeriesHistogram(ctx, req.(*RouteMetricSeriesHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSeriesDB_GetRouteMetricSeriesMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteMetricSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSeriesDBServer).GetRouteMetricSeriesMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.TimeSeriesDB/GetRouteMetricSeriesMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSeriesDBServer).GetRouteMetricSeriesMulti(ctx, req.(*RouteMetricSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSeriesDB_GetUptime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UptimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSeriesDBServer).GetUptime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.TimeSeriesDB/GetUptime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSeriesDBServer).GetUptime(ctx, req.(*UptimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSeriesDB_GetInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSeriesDBServer).GetInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.TimeSeriesDB/GetInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSeriesDBServer).GetInstances(ctx, req.(*GetInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSeriesDB_GetServerMetricSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerMetricSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSeriesDBServer).GetServerMetricSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.TimeSeriesDB/GetServerMetricSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSeriesDBServer).GetServerMetricSeries(ctx, req.(*ServerMetricSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSeriesDB_GetServerMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSeriesDBServer).GetServerMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.TimeSeriesDB/GetServerMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSeriesDBServer).GetServerMetric(ctx, req.(*ServerMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSeriesDB_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSeriesDBServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.TimeSeriesDB/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSeriesDBServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSeriesDB_GetLastError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSeriesDBServer).GetLastError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.TimeSeriesDB/GetLastError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSeriesDBServer).GetLastError(ctx, req.(*LastErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeSeriesDB_GetUsageReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsageReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSeriesDBServer).GetUsageReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.TimeSeriesDB/GetUsageReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSeriesDBServer).GetUsageReport(ctx, req.(*UsageReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimeSeriesDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.dashboard.TimeSeriesDB",
	HandlerType: (*TimeSeriesDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRouteMetricChange",
			Handler:    _TimeSeriesDB_GetRouteMetricChange_Handler,
		},
		{
			MethodName: "GetRouteMetricChangeHistogram",
			Handler:    _TimeSeriesDB_GetRouteMetricChangeHistogram_Handler,
		},
		{
			MethodName: "GetRouteMetricSeries",
			Handler:    _TimeSeriesDB_GetRouteMetricSeries_Handler,
		},
		{
			MethodName: "GetRouteMetricSeriesHistogram",
			Handler:    _TimeSeriesDB_GetRouteMetricSeriesHistogram_Handler,
		},
		{
			MethodName: "GetRouteMetricSeriesMulti",
			Handler:    _TimeSeriesDB_GetRouteMetricSeriesMulti_Handler,
		},
		{
			MethodName: "GetUptime",
			Handler:    _TimeSeriesDB_GetUptime_Handler,
		},
		{
			MethodName: "GetInstances",
			Handler:    _TimeSeriesDB_GetInstances_Handler,
		},
		{
			MethodName: "GetServerMetricSeries",
			Handler:    _TimeSeriesDB_GetServerMetricSeries_Handler,
		},
		{
			MethodName: "GetServerMetric",
			Handler:    _TimeSeriesDB_GetServerMetric_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _TimeSeriesDB_GetStatus_Handler,
		},
		{
			MethodName: "GetLastError",
			Handler:    _TimeSeriesDB_GetLastError_Handler,
		},
		{
			MethodName: "GetUsageReport",
			Handler:    _TimeSeriesDB_GetUsageReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tsdb.proto",
}
