// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: audit_svc.proto

package pb

import (
	context "context"
	audit "github.com/pomerium/pomerium/pkg/grpc/audit"
	crypt "github.com/pomerium/pomerium/pkg/grpc/crypt"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DecryptAuditRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SealedAuditRecords []*crypt.SealedMessage `protobuf:"bytes,1,rep,name=sealed_audit_records,json=sealedAuditRecords,proto3" json:"sealed_audit_records,omitempty"`
}

func (x *DecryptAuditRecordsRequest) Reset() {
	*x = DecryptAuditRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_svc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptAuditRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptAuditRecordsRequest) ProtoMessage() {}

func (x *DecryptAuditRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_svc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptAuditRecordsRequest.ProtoReflect.Descriptor instead.
func (*DecryptAuditRecordsRequest) Descriptor() ([]byte, []int) {
	return file_audit_svc_proto_rawDescGZIP(), []int{0}
}

func (x *DecryptAuditRecordsRequest) GetSealedAuditRecords() []*crypt.SealedMessage {
	if x != nil {
		return x.SealedAuditRecords
	}
	return nil
}

type DecryptAuditRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditRecords []*audit.Record `protobuf:"bytes,1,rep,name=audit_records,json=auditRecords,proto3" json:"audit_records,omitempty"`
}

func (x *DecryptAuditRecordsResponse) Reset() {
	*x = DecryptAuditRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_svc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptAuditRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptAuditRecordsResponse) ProtoMessage() {}

func (x *DecryptAuditRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audit_svc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptAuditRecordsResponse.ProtoReflect.Descriptor instead.
func (*DecryptAuditRecordsResponse) Descriptor() ([]byte, []int) {
	return file_audit_svc_proto_rawDescGZIP(), []int{1}
}

func (x *DecryptAuditRecordsResponse) GetAuditRecords() []*audit.Record {
	if x != nil {
		return x.AuditRecords
	}
	return nil
}

var File_audit_svc_proto protoreflect.FileDescriptor

var file_audit_svc_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x1a, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x73, 0x65, 0x61,
	0x6c, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69,
	0x75, 0x6d, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x1b, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x32, 0x86, 0x01, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x13, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2e,
	0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f,
	0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2f, 0x70, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x2d,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_audit_svc_proto_rawDescOnce sync.Once
	file_audit_svc_proto_rawDescData = file_audit_svc_proto_rawDesc
)

func file_audit_svc_proto_rawDescGZIP() []byte {
	file_audit_svc_proto_rawDescOnce.Do(func() {
		file_audit_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_audit_svc_proto_rawDescData)
	})
	return file_audit_svc_proto_rawDescData
}

var file_audit_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_audit_svc_proto_goTypes = []interface{}{
	(*DecryptAuditRecordsRequest)(nil),  // 0: pomerium.dashboard.DecryptAuditRecordsRequest
	(*DecryptAuditRecordsResponse)(nil), // 1: pomerium.dashboard.DecryptAuditRecordsResponse
	(*crypt.SealedMessage)(nil),         // 2: pomerium.crypt.SealedMessage
	(*audit.Record)(nil),                // 3: pomerium.audit.Record
}
var file_audit_svc_proto_depIdxs = []int32{
	2, // 0: pomerium.dashboard.DecryptAuditRecordsRequest.sealed_audit_records:type_name -> pomerium.crypt.SealedMessage
	3, // 1: pomerium.dashboard.DecryptAuditRecordsResponse.audit_records:type_name -> pomerium.audit.Record
	0, // 2: pomerium.dashboard.AuditService.DecryptAuditRecords:input_type -> pomerium.dashboard.DecryptAuditRecordsRequest
	1, // 3: pomerium.dashboard.AuditService.DecryptAuditRecords:output_type -> pomerium.dashboard.DecryptAuditRecordsResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_audit_svc_proto_init() }
func file_audit_svc_proto_init() {
	if File_audit_svc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_audit_svc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptAuditRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_svc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptAuditRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audit_svc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audit_svc_proto_goTypes,
		DependencyIndexes: file_audit_svc_proto_depIdxs,
		MessageInfos:      file_audit_svc_proto_msgTypes,
	}.Build()
	File_audit_svc_proto = out.File
	file_audit_svc_proto_rawDesc = nil
	file_audit_svc_proto_goTypes = nil
	file_audit_svc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuditServiceClient is the client API for AuditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuditServiceClient interface {
	DecryptAuditRecords(ctx context.Context, in *DecryptAuditRecordsRequest, opts ...grpc.CallOption) (*DecryptAuditRecordsResponse, error)
}

type auditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditServiceClient(cc grpc.ClientConnInterface) AuditServiceClient {
	return &auditServiceClient{cc}
}

func (c *auditServiceClient) DecryptAuditRecords(ctx context.Context, in *DecryptAuditRecordsRequest, opts ...grpc.CallOption) (*DecryptAuditRecordsResponse, error) {
	out := new(DecryptAuditRecordsResponse)
	err := c.cc.Invoke(ctx, "/pomerium.dashboard.AuditService/DecryptAuditRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditServiceServer is the server API for AuditService service.
type AuditServiceServer interface {
	DecryptAuditRecords(context.Context, *DecryptAuditRecordsRequest) (*DecryptAuditRecordsResponse, error)
}

// UnimplementedAuditServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuditServiceServer struct {
}

func (*UnimplementedAuditServiceServer) DecryptAuditRecords(context.Context, *DecryptAuditRecordsRequest) (*DecryptAuditRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptAuditRecords not implemented")
}

func RegisterAuditServiceServer(s *grpc.Server, srv AuditServiceServer) {
	s.RegisterService(&_AuditService_serviceDesc, srv)
}

func _AuditService_DecryptAuditRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptAuditRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).DecryptAuditRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pomerium.dashboard.AuditService/DecryptAuditRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).DecryptAuditRecords(ctx, req.(*DecryptAuditRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuditService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.dashboard.AuditService",
	HandlerType: (*AuditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DecryptAuditRecords",
			Handler:    _AuditService_DecryptAuditRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audit_svc.proto",
}
