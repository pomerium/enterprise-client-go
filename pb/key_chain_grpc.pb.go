// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.7
// source: key_chain.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeyChainService_DeleteKeyPair_FullMethodName = "/pomerium.dashboard.KeyChainService/DeleteKeyPair"
	KeyChainService_GetKeyPair_FullMethodName    = "/pomerium.dashboard.KeyChainService/GetKeyPair"
	KeyChainService_ListKeyPairs_FullMethodName  = "/pomerium.dashboard.KeyChainService/ListKeyPairs"
	KeyChainService_CreateKeyPair_FullMethodName = "/pomerium.dashboard.KeyChainService/CreateKeyPair"
	KeyChainService_UpdateKeyPair_FullMethodName = "/pomerium.dashboard.KeyChainService/UpdateKeyPair"
)

// KeyChainServiceClient is the client API for KeyChainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// KeyChainService manages and store TLS Certificates, Keys and CAs, known as
// Key Pairs
type KeyChainServiceClient interface {
	// DeleteKeyPair remove an x509 key pair based on a DeleteKeyPairRequest
	DeleteKeyPair(ctx context.Context, in *DeleteKeyPairRequest, opts ...grpc.CallOption) (*DeleteKeyPairResponse, error)
	// GetKeyPair retrieves an existing key pair
	GetKeyPair(ctx context.Context, in *GetKeyPairRequest, opts ...grpc.CallOption) (*GetKeyPairResponse, error)
	// ListKeyPairs lists existing key pairs based on parameters in
	// ListKeyPairsRequest
	ListKeyPairs(ctx context.Context, in *ListKeyPairsRequest, opts ...grpc.CallOption) (*ListKeyPairsResponse, error)
	// CreateKeyPair creates a new key pair
	CreateKeyPair(ctx context.Context, in *CreateKeyPairRequest, opts ...grpc.CallOption) (*CreateKeyPairResponse, error)
	// CreateKeyPair creates a new key pair
	UpdateKeyPair(ctx context.Context, in *UpdateKeyPairRequest, opts ...grpc.CallOption) (*UpdateKeyPairResponse, error)
}

type keyChainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyChainServiceClient(cc grpc.ClientConnInterface) KeyChainServiceClient {
	return &keyChainServiceClient{cc}
}

func (c *keyChainServiceClient) DeleteKeyPair(ctx context.Context, in *DeleteKeyPairRequest, opts ...grpc.CallOption) (*DeleteKeyPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKeyPairResponse)
	err := c.cc.Invoke(ctx, KeyChainService_DeleteKeyPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyChainServiceClient) GetKeyPair(ctx context.Context, in *GetKeyPairRequest, opts ...grpc.CallOption) (*GetKeyPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKeyPairResponse)
	err := c.cc.Invoke(ctx, KeyChainService_GetKeyPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyChainServiceClient) ListKeyPairs(ctx context.Context, in *ListKeyPairsRequest, opts ...grpc.CallOption) (*ListKeyPairsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKeyPairsResponse)
	err := c.cc.Invoke(ctx, KeyChainService_ListKeyPairs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyChainServiceClient) CreateKeyPair(ctx context.Context, in *CreateKeyPairRequest, opts ...grpc.CallOption) (*CreateKeyPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKeyPairResponse)
	err := c.cc.Invoke(ctx, KeyChainService_CreateKeyPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyChainServiceClient) UpdateKeyPair(ctx context.Context, in *UpdateKeyPairRequest, opts ...grpc.CallOption) (*UpdateKeyPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKeyPairResponse)
	err := c.cc.Invoke(ctx, KeyChainService_UpdateKeyPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyChainServiceServer is the server API for KeyChainService service.
// All implementations should embed UnimplementedKeyChainServiceServer
// for forward compatibility.
//
// KeyChainService manages and store TLS Certificates, Keys and CAs, known as
// Key Pairs
type KeyChainServiceServer interface {
	// DeleteKeyPair remove an x509 key pair based on a DeleteKeyPairRequest
	DeleteKeyPair(context.Context, *DeleteKeyPairRequest) (*DeleteKeyPairResponse, error)
	// GetKeyPair retrieves an existing key pair
	GetKeyPair(context.Context, *GetKeyPairRequest) (*GetKeyPairResponse, error)
	// ListKeyPairs lists existing key pairs based on parameters in
	// ListKeyPairsRequest
	ListKeyPairs(context.Context, *ListKeyPairsRequest) (*ListKeyPairsResponse, error)
	// CreateKeyPair creates a new key pair
	CreateKeyPair(context.Context, *CreateKeyPairRequest) (*CreateKeyPairResponse, error)
	// CreateKeyPair creates a new key pair
	UpdateKeyPair(context.Context, *UpdateKeyPairRequest) (*UpdateKeyPairResponse, error)
}

// UnimplementedKeyChainServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeyChainServiceServer struct{}

func (UnimplementedKeyChainServiceServer) DeleteKeyPair(context.Context, *DeleteKeyPairRequest) (*DeleteKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyPair not implemented")
}
func (UnimplementedKeyChainServiceServer) GetKeyPair(context.Context, *GetKeyPairRequest) (*GetKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyPair not implemented")
}
func (UnimplementedKeyChainServiceServer) ListKeyPairs(context.Context, *ListKeyPairsRequest) (*ListKeyPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeyPairs not implemented")
}
func (UnimplementedKeyChainServiceServer) CreateKeyPair(context.Context, *CreateKeyPairRequest) (*CreateKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyPair not implemented")
}
func (UnimplementedKeyChainServiceServer) UpdateKeyPair(context.Context, *UpdateKeyPairRequest) (*UpdateKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyPair not implemented")
}
func (UnimplementedKeyChainServiceServer) testEmbeddedByValue() {}

// UnsafeKeyChainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyChainServiceServer will
// result in compilation errors.
type UnsafeKeyChainServiceServer interface {
	mustEmbedUnimplementedKeyChainServiceServer()
}

func RegisterKeyChainServiceServer(s grpc.ServiceRegistrar, srv KeyChainServiceServer) {
	// If the following call pancis, it indicates UnimplementedKeyChainServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeyChainService_ServiceDesc, srv)
}

func _KeyChainService_DeleteKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyChainServiceServer).DeleteKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyChainService_DeleteKeyPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyChainServiceServer).DeleteKeyPair(ctx, req.(*DeleteKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyChainService_GetKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyChainServiceServer).GetKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyChainService_GetKeyPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyChainServiceServer).GetKeyPair(ctx, req.(*GetKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyChainService_ListKeyPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeyPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyChainServiceServer).ListKeyPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyChainService_ListKeyPairs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyChainServiceServer).ListKeyPairs(ctx, req.(*ListKeyPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyChainService_CreateKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyChainServiceServer).CreateKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyChainService_CreateKeyPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyChainServiceServer).CreateKeyPair(ctx, req.(*CreateKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyChainService_UpdateKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyChainServiceServer).UpdateKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyChainService_UpdateKeyPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyChainServiceServer).UpdateKeyPair(ctx, req.(*UpdateKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyChainService_ServiceDesc is the grpc.ServiceDesc for KeyChainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyChainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pomerium.dashboard.KeyChainService",
	HandlerType: (*KeyChainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteKeyPair",
			Handler:    _KeyChainService_DeleteKeyPair_Handler,
		},
		{
			MethodName: "GetKeyPair",
			Handler:    _KeyChainService_GetKeyPair_Handler,
		},
		{
			MethodName: "ListKeyPairs",
			Handler:    _KeyChainService_ListKeyPairs_Handler,
		},
		{
			MethodName: "CreateKeyPair",
			Handler:    _KeyChainService_CreateKeyPair_Handler,
		},
		{
			MethodName: "UpdateKeyPair",
			Handler:    _KeyChainService_UpdateKeyPair_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "key_chain.proto",
}
